//Code pen để tập code html: https://codepen.io/
//mdn web docs: để học thẻ: https://developer.mozilla.org/en-US/
//web archieve để xem giao diện của tất cả các web trên thế giới
//web diffchecker để so sánh code: https://www.diffchecker.com/
//web emmet -> cheat sheet: https://docs.emmet.io/cheat-sheet/
//web unplash để lấy hình ảnh: https://unsplash.com/
//web html entities list -> thể hiển ký tự đặc biệt trong web (UTF - 8 thì có thể hiển thị emoji lun ): https://www.freeformatter.com/html-entities.html
//web codebeauty, search html escape.. -> chuyển code thành entities: https://codebeautify.org/html-escape-unescape#google_vignette
//Internal css w3school để chèn css: https://www.w3schools.com/CSS/css_howto.asp
//css reference w3c: để tham khảo thuộc tính css: https://www.w3schools.com/cssref/index.php
/web make favicon online -> tạo favicon -> lấy code dán dô head: https://www.favicon-generator.org/
//vendor prefix css -> tìm prefix : https://www.geeksforgeeks.org/explain-css-vendor-prefixes/
//autop prefix: https://autoprefixer.github.io/
//Caniuse.com : kiểm tra thuộc tính có cần sử dụng prefix ko để hổ trợ đa trình duyệt: https://caniuse.com/
//HTMl table basic: học về bảng: https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics
//PrimJS: học thêm dìa css: https://prismjs.com/
//css selector w3c: học selector: https://www.w3schools.com/cssref/css_selectors.php
//validator html: kiểm tra code có bị trùng ko: https://validator.w3.org/#validate_by_input
//css selector: học selector : https://www.w3schools.com/CSS/css_selectors.asp
//pseudo classes: https://www.w3schools.com/css/css_pseudo_classes.asp , https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
//css specificity: học độ ưu tiên: https://www.w3schools.com/css/css_specificity.asp
//game.tuhoc.cc: để luyện tập: 
/css border: xem kiểu viền: https://www.w3schools.com/css/css_border.asp
//default css values: học thuộc tính mặc định của element: https://www.w3schools.com/cssref/css_default_values.php
//WEb reset css: https://meyerweb.com/eric/tools/css/reset/







//shift + 1 + tap để tạo cấu trúc file html
lang="en" //khai báo cho trình duyệt biết đang dùng ngôn ngữ nào
<head> :- chứa thông tin của trang web mà ko dc hiển thị trực tiếp lên trình duyệt của user
        - chứa thông tin như tiêu đề trang, từ khóa, thông tin tác giả, tập tin css và js ...
//bôi đen khối + alt + w để chèn thêm thẻ vào khối code đó
//ctrl + k + c : cmt
//ctrl + k + u: un cmt
//ctrl + d: chọn những từ giống nhau
//nhấn giữ alt để chọn nhìu dòng
//alt + shift + xuống: copy dòng trên xuống dòng dưới
//git branch: kiểm tra nhánh trên máy
//git branch -a: kiểm tra nhánh trên máy và trên github
//git branch -c <ten_nhanh>: tạo nhánh mới -> copy all code nhánh hiện tại qua nhánh mới
//git checkout <ten_nhanh>: chuyển nhánh làm việc -> code chỉ thay đổi ở nhánh dg lm 
//git checkout -b <ten_nhanh>: tạo và chuyển nhánh (lấy code cũ và commit )
//git push  -u(--set-upstream) origin <ten_nhanh>: đẩy code theo từng nhánh
//git branch -d <ten_nhanh>: xóa nhánh (ko xóa nhánh hiện tại và nhánh chưa push)
//git push -d origin <ten_nhanh>: push và xóa nhánh 
//git log (--online): xem lịch sử -> nhấn q để thoát 
//git checkout <id_commit>: trở về code cũ 





<title> : tiêu đề trang web. vd: google, facebook...
Lorem9: sinh ra 9 ký tự ngẫu nhiên
Lorem*3: sinh ra 3 dòng
Lorem: 1 dòng 30 từ
<body>: chứa nd chính của web: văn bản, mã js, các định dạng...
<h1> - <h6>: định nghĩa tiêu đề trang
<p>: chứa các đoạn văn
<b>: bold: in đậm (dùng strong thay thế nội dung quan trọng - có ngữ nghĩa so với trình duyệt)
<i>: italic: in nghiêng (dùng em-emphasis để nhấn mạnh nội dung)
<u>: underline: gạch chân 
<a>: anchor: gắn kèm đường dẫn (link, mail, sdt)
        <!--Để trống href -> tải lại trang-->
        --> href = "#" : trở lên đầu trang
        --> ko nhập gì mặc định target = "_self"
        --> _blank: mở tab mới
        --> href = "tel:...": chuyển hướng đến app có thể gọi điện thoại
        --> href = "mailto:...": chuyển hướng đến app để gửi mail
                -> cc=: ds email nhận đc bản sao của mail(, để gửi nhìu ng)
                -> bcc: ds email ẩn sẽ nhận dc bản sao của thư (ko thấy ng trong to vs cc)
                -> subject: tiêu đề thư
                -> body: nội dung thư
                -> ?: dấu phân cách giữa phần mailto và tham số
                -> &: dấu phân cách tham số (không có dấu cách)
<img>: image: hình ảnh
        ->alt: hiển thị text khi lỗi hình ảnh/ hỗ trợ trình đọc màn hình cho ng khiếm thị/ công cụ tìm kiếm trên gg
        -> height và width= chiều cao và rộng của ảnh.vd width = "50" -> 50 pixel/ width = "50%" -> 50% của web
        -> thường xét 1 chìu height or width để ảnh ko vỡ
        -> path tương đối thường có ./ -> ./ để thấy file/folder cùng cấp (phụ thuộc vào vị trí đứng của thư mục hiện tại): tương lai thay đôi
        -> ../ để thấy file/folder trước (1 ../ là lùi 1 cấp)
        -> path tuyệt đối duyệt từ gốc (dùng /): tương lai ko đổi
<ul>: un-ordered list: danh sách ko có thứ tự
<ol>: ordered list: danh sách có thứ tự
<br>: break: ngắt dòng or phá vỡ - thẻ tự đóng (1 thẻ <br> or <br />)
<hr>: horizontal rule: tạo đường kẻ ngang  ngăn cách trên trang - thẻ tự đóng
<pre>: preformat: giữ nguyên định dạng văn bản vd: khoảng trắng, thụt đầu dòng
<code>: thẻ có ngữ nghĩa web sẽ hiểu nó đoạn code thật trên web
        --> Highlight code vs thư viện PrismJS
            -> thêm dòng nè trên <head>:     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css">
            -> Step 2: Thêm class="language-html" vào thẻ mở code -->
            -> <!-- Step3: Thêm đoạn code sau trước thẻ đóng </body> -->
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<table>: để tạo bảng
        - <tr>: table row: 1 hàng
        - <td>: table data: 1 ô dữ liệu
        - <th>: table header: 1 ô tiêu đề
        - <thead>: table header: định nghĩa tiêu đề bảng, thường chứa các ô <th>
        - <tbody>: table body: định nghĩa phần thân bảng, thường chứa thẻ <tr> và <td>
        - <tfoot>: table footer: chân bảng, định nghĩa phần cuối bảng, thường chứa ô tổng kết, chú thích or thông tin cuối cùng
        - colspan : chỉ định phần tử chiếm bnhiu CỘT
        - rowspan: chỉ định phần tử chiếm bnhiu HÀNG
<span>: tách từ trong đoạn

/------------------------------------------------//
- Có 3 nơi có thể đặt css

-> Inline: css nội tuyến <tag style="css">

-> Internal: css nội bộ: <style>css<style>, h1... là các selector -> tác động lên toàn bộ 1 thẻ dc chọn

-> External: css bên ngoài: <link href="style.css"> -> viết mã css thành 1 tệp .css riêng -> trên head gõ link:css -> nhấn vào style.css ctrl+click để tạo file style.css

---> ĐỘ ưu tiên : Inline  cao nhất -> Internal or External (tk nào viết sau tk đó định nghĩa)

- Opacity: quy định độ trong suốt (0 -> 100% / 0 -> 1.0 : mờ -> rõ nhất) nhưng vẫn có thể tương tác, vẫn chiếm ko gian

- Display: none -> ẩn phần tử khỏi giao diện (xóa cả ko gian nó chiếm)

- Visibility: ẩn or hiện element: ko tương tác dc nhưng vẫn chiếm ko gian

Type                    | opacity: 0 | display: none | visibility: hidden
-------------------------------------------------------------------------
Ẩn khỏi giao diện       |     ✓      |       ✓       |         ✓
Chiếm ko gian           |     ✓      |       ✗       |         ✓
Có thể tương tác        |     ✓      |       ✗       |         ✗
Ẩn phần tử con          |     ✓      |       ✓       |         ✓
Tính thừa kế            |     ✗      |       ✓       |         ✓
Hiển thị phần tử con    |     ✗      |       ✗       |         ✓ :hiển thị riêng lẻ các phần tử con trong câu...
Hỗ trợ Animations       |      ✓     |       ✗       |         ✓  

- Thêm favicon: nhập trên head link:favicon -> 

- id: để chọn 1 phần tử nhất định( sử dụng bên style thì dùng #<ten_id>)

- class: do ko sd lại tên id -> mún khai báo trùng lặp thì dùng class -> bên style dùng .<tên_class> -
        -> có thể khai báo nhìu class cùng thẻ cách nhau bởi dấu cách
- *selector: chọn tất cả element (style khai báo *)

- element.class: vd p.intro: chọn tất cả thẻ p có class là intro

- , selector: liệt kê selector

- .class1.class2 (ko có cách): chọn tất cả các thẻ có đồng thời class name là name1 và name2

- space selector: vd div p: chọn tất cả thẻ p nằm trong thẻ div
        -> selector1 [space] selector2: selector2 là con của selector1

- element>element: vd div > p : chọn tất cả thẻ p là con trực tiếp của thẻ div
        -> selector1 > selector2: selector2 là con trực tiếp của selector1
        -> con trực tiếp: thẻ thụt vào 1 cấp so vs thẻ trc

- element + element: vd: div + p: Chọn phần tử <p> đặt ngay sau phần tử <div>
        -> selector1 + selector2: s2 đầu tiên sát ngay sau s1
        -> Sát ngay sau: dòng dưới sát lun

- element ~ element: vd: div ~ p: chọn tất cả thẻ p nằm sau thẻ div
        -> selector1 ~ selector2: tất cả s2 nằm sau s1
        -> Nằm sau: ở sau là dc
        
- attribute [target]: chọn tất cả thẻ có thuộc tính target

- attribute = value: [target = "_blank"]: chọn tất cả thuộc tính có chính xác giá trị targer = _blank

- [attribute~=value]: [title~="flower"]: Chọn tất cả các thuộc tính title chứa từ flower

- [attribute*=value]: [title *= "pic"]: chọn tất cả thuộc tính title chứa chuỗi pic trong giá trị, vd: pic 123, picccc...

- [attribute|=value]: [title |= "pic"]: chọn tất cả thuộc tính title có từ duy nhất bắt đầu = từ pic: vd: pic, pic-123... (có chính xác giá trị mà từ pic bắt đầu)
        -> pic đứng đơn lẻ hoặc từ pic đứng đầu và các từ sau nối với pic = dấu -
- [attribute^=value]: [title ^= "pic"]: chọn tất cả các thẻ có title bắt đầu bằng từ pic (ko quan tâm có space ở sau)

- [attribute$=value]: [title $= "c"]: chọn tất cả các thẻ có title kết thúc bằng kí tự c
        ->kết thúc = j cx dc

- Pseudo class: lớp giả: định nghĩa 1 trạng thái đặc biệt của 1 phần tử
        -> cú pháp: selector: Pseudo-classes{
                                 khối lệnh css
                                 property: value;
                                }

- :hover: vd: a : hover -> chọn các thẻ a khi di chuột qua

- :active: vd: a : active -> chọn các thẻ a khi nhấn giữ chuột

- :link: vd: a : link -> chọn các thẻ a có liên kết chưa click vào

- :visited: vd: a : visited -> chọn các thẻ a có liên kết đã truy cập

- :empty: vd: div: empty -> chọn các thẻ div ko có nội dung

- :target: vd: #home:target -> chọn thẻ có id = "home" khi trên url có hash tương ứng. vd: https://domain.com/#home

- :first-child: vd: p:first-child: chọn các thẻ p là thẻ con đầu tiên

- :last-child: vd: p:last-child: chọn các thẻ p là thẻ con cuối cùng

- :nth-child(n): vd: p:nth-child(2): chọn các thẻ p là thẻ con thứ 2 từ trên xuống
( có thể dùng odd: nhảy theo n lẻ, even: nhảy theo n chẵn, 2n+1: để nhảy theo step mong muốn)

- :nth-last-child(n): vd: p:nth-last-child(2): chọn các thẻ p là thẻ con thứ 2 từ cuối lên

- :only-child: vd: p:only-child: chọn các thẻ p là thẻ con duy nhất
        -> p là thẻ con duy nhất <=> chỉ có duy nhất 1 thẻ p trong khối

- :first-of-type: vd: p:first-of-type: chọn thẻ p xuất hiện đầu tiên trong thẻ cha

- :last-of-type: vd: p:last-of-type: chọn thẻ p xuất hiện cuối cùng trong thẻ cha

- :nth-of-type(2): vd: p:nth-of-type(2): chọn thẻ p xuất hiện thứ 2 trong thẻ cha

- :nth-last-of-type(2): vd: p:nth-last-of-type(2): chọn thẻ p xuất hiện thứ 2 trong thẻ cha từ dưới lên

- :only-of-type: vd: p:only-of-type: chọn thẻ p xuất hiện duy nhất trong thẻ cha

- :not(selector): vd: .top:not(p): chọn các thẻ trong class = "top" loại trừ các thẻ p

- Thứ tự ưu tiên
        1. !important
        2. inline style
        3. id(#) selector
        4. class(.) hoặc pseudo classes (:) selector
        5. element selector(h, li, div..)
        6. universal selector(*): bộ chọn chung

----------------
- Box model: trình duyệt coi mỗi phần tử là 1 box - hình chữ nhật
        -> 4 phần
                1. Nội dung(width, heigth) -> hình ảnh, text, video...
                2. padding -> khoảng đệm nội dung và viền -> khoảng ko chứa nội dung
                3. border -> viền của phần tử (nét liền, đứt)
                4. margin -> khoảng cách vs các phần tử liền kề khác
        --> kích thước cao * rộng của 1 phần tử  = content + padding + border (ko bao gồm margin)
- padding: phần đềm
        -> các cách khai báo:
        
                /* (trên dưới) - (trái, phải) */
                /* padding: 20px 10px; */

                /* trên - (trái, phải) - dưới */
                /* padding: 20px 15px 25px; */

                /* trên - phải - dưới - trái */
                padding: 10px 20px 30px 40px;

- border: cú pháp: border: <độ rộng> <kiểu viển> <màu viền>
        1. dashed: dg đứt nét
        2. dotted: viền là các chấm dotted
        3. 2 đg viền // liền nhau
        4. groove: viền 3d (dg rãnh)
        5. ridge: viền 3d (nhấp nhô)
        6. inset: viền 3d
        7. outset: viền 3d
        8. solid: viền rắn
        9. hidden: Ẩn
        10. mix: ghép các kiểu viền lại

- border-radius: bo góc 
        1. top-left
        2. top-right
        3. bottom - left
        4. bottom-right

- text-align: center; để canh giữa nội dung

- margin: 0 auto; để đưa phần tử ra giữa trang web

- margin collapse:
        TH1.  là hiện tượng chồng lặp thuộc tính margin khi 2 PHẦN TỬ LIỀN KỀ cùng 
        thiết lặp margin vs phần tử còn lại THEO CHIỀU DỌC(theo chiều ngang ko bị)
        -> ví dụ: margin-top: 50px;
                  margin-bottom: 70px;
                  -> 2 khối cách nhau 70px thôi
        --->Cách khắc phục
        1. thiết lập margin 1 chiều
        2. thêm thuộc tính display = flex vào thẻ cha chứa 2 phần tử đấy

        TH2: xảy ra vs các phần tử có quan hệ cha con-> khi set margin cùng chiều cho thẻ cha và thẻ con thì 
        sẽ bị collapse(kết hợp). kích thước nào lớn hơn thì quyết định

- display: block: chiếm hết 1 dòng
- display: inline: vừa đủ phần tử

- outline: dg viền bao quanh mép ngoài cùng của đối tượng
        -> ko lm tăng thêm kích thước phần tử
        -> đơn giản là 1 vùng bao bên ngoài, chiếm cả vào phần margin( từ border ra ngoài đè lên margin) -> là lớp phủ bên ngoài
        -> ko áp dụng vẽ theo nhiều chiều như border
        -> có thêm thuộc tính outline-offset -> tách ra khỏi phần tử kích thước box ra ngoài

- box sizing: content-box và border Box(dc sd thường vì để khớp kích thước vs thiết kế, tránh tính toán lại phần nội dung)
        -> content-box: width, hight là kích thước của content -> bị thay đổi kích thước phần tử khi edit 
        -> border-box: width, hight là kích thước của phần tử(1 box) -> ko thay đổi kích thước phần tử khi chỉnh sửa các thuộc tính khác
        -> ko sửa box-sizing: web mặc định là content box


- CSS default value: trình duyệt sẽ tự thêm vào các thuộc tính mặc định để hiển thị các thẻ cơ bản đã học
Tuy nhiên những trình duyệt khác nhau sẽ có những thuộc tính mặc định khác nhau
Có những CSS mặc định lm khó khăn trong việc kiểm soát kích thước và tính toán kích thước khi thiết kế
--> Reset CSS












