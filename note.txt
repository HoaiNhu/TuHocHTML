//Code pen để tập code html: https://codepen.io/
//mdn web docs: để học thẻ: https://developer.mozilla.org/en-US/
//web archieve để xem giao diện của tất cả các web trên thế giới
//web diffchecker để so sánh code: https://www.diffchecker.com/
//web emmet -> cheat sheet: https://docs.emmet.io/cheat-sheet/
//web unplash để lấy hình ảnh: https://unsplash.com/
//web html entities list -> thể hiển ký tự đặc biệt trong web (UTF - 8 thì có thể hiển thị emoji lun ): https://www.freeformatter.com/html-entities.html
//web codebeauty, search html escape.. -> chuyển code thành entities: https://codebeautify.org/html-escape-unescape#google_vignette
//Internal css w3school để chèn css: https://www.w3schools.com/CSS/css_howto.asp
//css reference w3c: để tham khảo thuộc tính css: https://www.w3schools.com/cssref/index.php
/web make favicon online -> tạo favicon -> lấy code dán dô head: https://www.favicon-generator.org/
//vendor prefix css -> tìm prefix : https://www.geeksforgeeks.org/explain-css-vendor-prefixes/
//autop prefix: https://autoprefixer.github.io/
//Caniuse.com : kiểm tra thuộc tính có cần sử dụng prefix ko để hổ trợ đa trình duyệt: https://caniuse.com/
//HTMl table basic: học về bảng: https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics
//PrimJS: học thêm dìa css: https://prismjs.com/
//css selector w3c: học selector: https://www.w3schools.com/cssref/css_selectors.php
//validator html: kiểm tra code có bị trùng ko: https://validator.w3.org/#validate_by_input












//shift + 1 + tap để tạo cấu trúc file html
lang="en" //khai báo cho trình duyệt biết đang dùng ngôn ngữ nào
<head> :- chứa thông tin của trang web mà ko dc hiển thị trực tiếp lên trình duyệt của user
        - chứa thông tin như tiêu đề trang, từ khóa, thông tin tác giả, tập tin css và js ...
//bôi đen khối + alt + w để chèn thêm thẻ vào khối code đó
//ctrl + k + c : cmt
//ctrl + k + u: un cmt
//ctrl + d: chọn những từ giống nhau
//nhấn giữ alt để chọn nhìu dòng
//alt + shift + xuống: copy dòng trên xuống dòng dưới
//git branch: kiểm tra nhánh trên máy
//git branch -a: kiểm tra nhánh trên máy và trên github
//git branch -c <ten_nhanh>: tạo nhánh mới -> copy all code nhánh hiện tại qua nhánh mới
//git checkout <ten_nhanh>: chuyển nhánh làm việc -> code chỉ thay đổi ở nhánh dg lm 
//git checkout -b <ten_nhanh>: tạo và chuyển nhánh (lấy code cũ và commit )
//git push  -u(--set-upstream) origin <ten_nhanh>: đẩy code theo từng nhánh
//git branch -d <ten_nhanh>: xóa nhánh (ko xóa nhánh hiện tại và nhánh chưa push)
//git push -d origin <ten_nhanh>: push và xóa nhánh 
//git log (--online): xem lịch sử -> nhấn q để thoát 
//git checkout <id_commit>: trở về code cũ 





<title> : tiêu đề trang web. vd: google, facebook...
Lorem9: sinh ra 9 ký tự ngẫu nhiên
Lorem*3: sinh ra 3 dòng
Lorem: 1 dòng 30 từ
<body>: chứa nd chính của web: văn bản, mã js, các định dạng...
<h1> - <h6>: định nghĩa tiêu đề trang
<p>: chứa các đoạn văn
<b>: bold: in đậm (dùng strong thay thế nội dung quan trọng - có ngữ nghĩa so với trình duyệt)
<i>: italic: in nghiêng (dùng em-emphasis để nhấn mạnh nội dung)
<u>: underline: gạch chân 
<a>: anchor: gắn kèm đường dẫn (link, mail, sdt)
        <!--Để trống href -> tải lại trang-->
        --> href = "#" : trở lên đầu trang
        --> ko nhập gì mặc định target = "_self"
        --> _blank: mở tab mới
        --> href = "tel:...": chuyển hướng đến app có thể gọi điện thoại
        --> href = "mailto:...": chuyển hướng đến app để gửi mail
                -> cc=: ds email nhận đc bản sao của mail(, để gửi nhìu ng)
                -> bcc: ds email ẩn sẽ nhận dc bản sao của thư (ko thấy ng trong to vs cc)
                -> subject: tiêu đề thư
                -> body: nội dung thư
                -> ?: dấu phân cách giữa phần mailto và tham số
                -> &: dấu phân cách tham số (không có dấu cách)
<img>: image: hình ảnh
        ->alt: hiển thị text khi lỗi hình ảnh/ hỗ trợ trình đọc màn hình cho ng khiếm thị/ công cụ tìm kiếm trên gg
        -> height và width= chiều cao và rộng của ảnh.vd width = "50" -> 50 pixel/ width = "50%" -> 50% của web
        -> thường xét 1 chìu height or width để ảnh ko vỡ
        -> path tương đối thường có ./ -> ./ để thấy file/folder cùng cấp (phụ thuộc vào vị trí đứng của thư mục hiện tại): tương lai thay đôi
        -> ../ để thấy file/folder trước (1 ../ là lùi 1 cấp)
        -> path tuyệt đối duyệt từ gốc (dùng /): tương lai ko đổi
<ul>: un-ordered list: danh sách ko có thứ tự
<ol>: ordered list: danh sách có thứ tự
<br>: break: ngắt dòng or phá vỡ - thẻ tự đóng (1 thẻ <br> or <br />)
<hr>: horizontal rule: tạo đường kẻ ngang  ngăn cách trên trang - thẻ tự đóng
<pre>: preformat: giữ nguyên định dạng văn bản vd: khoảng trắng, thụt đầu dòng
<code>: thẻ có ngữ nghĩa web sẽ hiểu nó đoạn code thật trên web
        --> Highlight code vs thư viện PrismJS
            -> thêm dòng nè trên <head>:     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css">
            -> Step 2: Thêm class="language-html" vào thẻ mở code -->
            -> <!-- Step3: Thêm đoạn code sau trước thẻ đóng </body> -->
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<table>: để tạo bảng
        - <tr>: table row: 1 hàng
        - <td>: table data: 1 ô dữ liệu
        - <th>: table header: 1 ô tiêu đề
        - <thead>: table header: định nghĩa tiêu đề bảng, thường chứa các ô <th>
        - <tbody>: table body: định nghĩa phần thân bảng, thường chứa thẻ <tr> và <td>
        - <tfoot>: table footer: chân bảng, định nghĩa phần cuối bảng, thường chứa ô tổng kết, chú thích or thông tin cuối cùng
        - colspan : chỉ định phần tử chiếm bnhiu CỘT
        - rowspan: chỉ định phần tử chiếm bnhiu HÀNG
<span>: tách từ trong đoạn

/------------------------------------------------//
- Có 3 nơi có thể đặt css
-> Inline: css nội tuyến <tag style="css">
-> Internal: css nội bộ: <style>css<style>, h1... là các selector -> tác động lên toàn bộ 1 thẻ dc chọn
-> External: css bên ngoài: <link href="style.css"> -> viết mã css thành 1 tệp .css riêng -> trên head gõ link:css -> nhấn vào style.css ctrl+click để tạo file style.css
---> ĐỘ ưu tiên : Inline  cao nhất -> Internal or External (tk nào viết sau tk đó định nghĩa)
- Opacity: quy định độ trong suốt (0 -> 100% / 0 -> 1.0 : mờ -> rõ nhất) nhưng vẫn có thể tương tác, vẫn chiếm ko gian
- Display: none -> ẩn phần tử khỏi giao diện (xóa cả ko gian nó chiếm)
- Visibility: ẩn or hiện element: ko tương tác dc nhưng vẫn chiếm ko gian

Type                    | opacity: 0 | display: none | visibility: hidden
-------------------------------------------------------------------------
Ẩn khỏi giao diện       |     ✓      |       ✓       |         ✓
Chiếm ko gian           |     ✓      |       ✗       |         ✓
Có thể tương tác        |     ✓      |       ✗       |         ✗
Ẩn phần tử con          |     ✓      |       ✓       |         ✓
Tính thừa kế            |     ✗      |       ✓       |         ✓
Hiển thị phần tử con    |     ✗      |       ✗       |         ✓ :hiển thị riêng lẻ các phần tử con trong câu...
Hỗ trợ Animations       |      ✓     |       ✗       |         ✓  

- Thêm favicon: nhập trên head link:favicon -> 
- id: để chọn 1 phần tử nhất định( sử dụng bên style thì dùng #<ten_id>)
- class: do ko sd lại tên id -> mún khai báo trùng lặp thì dùng class -> bên style dùng .<tên_class> -
        -> có thể khai báo nhìu class cùng thẻ cách nhau bởi dấu cách
