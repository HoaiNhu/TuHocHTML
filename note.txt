//Code pen để tập code html: https://codepen.io/
//mdn web docs: để học thẻ: https://developer.mozilla.org/en-US/
//web archieve để xem giao diện của tất cả các web trên thế giới
//web diffchecker để so sánh code: https://www.diffchecker.com/
//web emmet -> cheat sheet: https://docs.emmet.io/cheat-sheet/
//web unplash để lấy hình ảnh: https://unsplash.com/
//web html entities list -> thể hiển ký tự đặc biệt trong web (UTF - 8 thì có thể hiển thị emoji lun ): https://www.freeformatter.com/html-entities.html
//web codebeauty, search html escape.. -> chuyển code thành entities: https://codebeautify.org/html-escape-unescape#google_vignette
//Internal css w3school để chèn css: https://www.w3schools.com/CSS/css_howto.asp
//css reference w3c: để tham khảo thuộc tính css: https://www.w3schools.com/cssref/index.php
/web make favicon online -> tạo favicon -> lấy code dán dô head: https://www.favicon-generator.org/
//vendor prefix css -> tìm prefix : https://www.geeksforgeeks.org/explain-css-vendor-prefixes/
//autop prefix: https://autoprefixer.github.io/
//Caniuse.com : kiểm tra thuộc tính có cần sử dụng prefix ko để hổ trợ đa trình duyệt: https://caniuse.com/
//HTMl table basic: học về bảng: https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics
//PrimJS: học thêm dìa css: https://prismjs.com/
//css selector w3c: học selector: https://www.w3schools.com/cssref/css_selectors.php
//validator html: kiểm tra code có bị trùng ko: https://validator.w3.org/#validate_by_input
//css selector: học selector : https://www.w3schools.com/CSS/css_selectors.asp
//pseudo classes: https://www.w3schools.com/css/css_pseudo_classes.asp , https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
//css specificity: học độ ưu tiên: https://www.w3schools.com/css/css_specificity.asp
//game.tuhoc.cc: để luyện tập: 
/css border: xem kiểu viền: https://www.w3schools.com/css/css_border.asp
//default css values: học thuộc tính mặc định của element: https://www.w3schools.com/cssref/css_default_values.php
//WEb reset css: https://meyerweb.com/eric/tools/css/reset/
//html block inline element: https://www.w3schools.com/htmL/html_blocks.asp
//CSS units: https://www.w3schools.com/cssref/css_units.php
//Color name: https://htmlcolorcodes.com/color-names/
//Google Fonts: https://fonts.google.com/?preview.layout=grid
//System Font stack: https://css-tricks.com/snippets/css/system-font-stack/
//Css font stack: https://www.cssfontstack.com/
//css <tên thuộc tính> property: kiểm tra có kế thừa ko
//typography in css: https://cssreference.io/typography/
//css generator: chỉnh shadow: https://cssgenerator.org/text-shadow-css-generator.html
//overscroll-behavior: https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior , https://css-tricks.com/almanac/properties/o/overscroll-behavior/
//custom scrollbar: https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
//awesome font cdn:  lấy link để nhúng icon: https://cdnjs.com/libraries/font-awesome
//font awesome: lấy icon: https://fontawesome.com/icons
//linear gradient: css gradient: https://www.w3schools.com/css/css3_gradients.asp
//css gradient.io: tạo dải màu chuyển sắc: https://cssgradient.io/gradient-backgrounds/
//css background property: học viết tắt background: https://www.w3schools.com/cssref/css3_pr_background.php
//backdrop filter: hiệu ứng cho nền phía sau: https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter
//css clip path: tạo hình đa giác: https://www.cssportal.com/css-clip-path-generator/



//shift + 1 + tap để tạo cấu trúc file html
lang="en" //khai báo cho trình duyệt biết đang dùng ngôn ngữ nào
<head> :- chứa thông tin của trang web mà ko dc hiển thị trực tiếp lên trình duyệt của user
        - chứa thông tin như tiêu đề trang, từ khóa, thông tin tác giả, tập tin css và js ...
//bôi đen khối + alt + w để chèn thêm thẻ vào khối code đó
//ctrl + k + c : cmt
//ctrl + k + u: un cmt
//ctrl + d: chọn những từ giống nhau
//nhấn giữ alt để chọn nhìu dòng
//alt + shift + xuống: copy dòng trên xuống dòng dưới
//git branch: kiểm tra nhánh trên máy
//git branch -a: kiểm tra nhánh trên máy và trên github
//git branch -c <ten_nhanh>: tạo nhánh mới -> copy all code nhánh hiện tại qua nhánh mới
//git checkout <ten_nhanh>: chuyển nhánh làm việc -> code chỉ thay đổi ở nhánh dg lm 
//git checkout -b <ten_nhanh>: tạo và chuyển nhánh (lấy code cũ và commit )
//git push  -u(--set-upstream) origin <ten_nhanh>: đẩy code theo từng nhánh
//git branch -d <ten_nhanh>: xóa nhánh (ko xóa nhánh hiện tại và nhánh chưa push)
//git push -d origin <ten_nhanh>: push và xóa nhánh 
//git log (--online): xem lịch sử -> nhấn q để thoát 
//git checkout <id_commit>: trở về code cũ 





<title> : tiêu đề trang web. vd: google, facebook...
Lorem9: sinh ra 9 ký tự ngẫu nhiên
Lorem*3: sinh ra 3 dòng
Lorem: 1 dòng 30 từ
<body>: chứa nd chính của web: văn bản, mã js, các định dạng...
<h1> - <h6>: định nghĩa tiêu đề trang
<p>: chứa các đoạn văn
<b>: bold: in đậm (dùng strong thay thế nội dung quan trọng - có ngữ nghĩa so với trình duyệt)
<i>: italic: in nghiêng (dùng em-emphasis để nhấn mạnh nội dung)
<u>: underline: gạch chân 
<a>: anchor: gắn kèm đường dẫn (link, mail, sdt)
        <!--Để trống href -> tải lại trang-->
        --> href = "#" : trở lên đầu trang
        --> ko nhập gì mặc định target = "_self"
        --> _blank: mở tab mới
        --> href = "tel:...": chuyển hướng đến app có thể gọi điện thoại
        --> href = "mailto:...": chuyển hướng đến app để gửi mail
                -> cc=: ds email nhận đc bản sao của mail(, để gửi nhìu ng)
                -> bcc: ds email ẩn sẽ nhận dc bản sao của thư (ko thấy ng trong to vs cc)
                -> subject: tiêu đề thư
                -> body: nội dung thư
                -> ?: dấu phân cách giữa phần mailto và tham số
                -> &: dấu phân cách tham số (không có dấu cách)
<img>: image: hình ảnh
        ->alt: hiển thị text khi lỗi hình ảnh/ hỗ trợ trình đọc màn hình cho ng khiếm thị/ công cụ tìm kiếm trên gg
        -> height và width= chiều cao và rộng của ảnh.vd width = "50" -> 50 pixel/ width = "50%" -> 50% của web
        -> thường xét 1 chìu height or width để ảnh ko vỡ
        -> path tương đối thường có ./ -> ./ để thấy file/folder cùng cấp (phụ thuộc vào vị trí đứng của thư mục hiện tại): tương lai thay đôi
        -> ../ để thấy file/folder trước (1 ../ là lùi 1 cấp)
        -> path tuyệt đối duyệt từ gốc (dùng /): tương lai ko đổi
<ul>: un-ordered list: danh sách ko có thứ tự
<ol>: ordered list: danh sách có thứ tự
<br>: break: ngắt dòng or phá vỡ - thẻ tự đóng (1 thẻ <br> or <br />)
<hr>: horizontal rule: tạo đường kẻ ngang  ngăn cách trên trang - thẻ tự đóng
<pre>: preformat: giữ nguyên định dạng văn bản vd: khoảng trắng, thụt đầu dòng
<code>: thẻ có ngữ nghĩa web sẽ hiểu nó đoạn code thật trên web
        --> Highlight code vs thư viện PrismJS
            -> thêm dòng nè trên <head>:     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css">
            -> Step 2: Thêm class="language-html" vào thẻ mở code -->
            -> <!-- Step3: Thêm đoạn code sau trước thẻ đóng </body> -->
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<table>: để tạo bảng
        - <tr>: table row: 1 hàng
        - <td>: table data: 1 ô dữ liệu
        - <th>: table header: 1 ô tiêu đề
        - <thead>: table header: định nghĩa tiêu đề bảng, thường chứa các ô <th>
        - <tbody>: table body: định nghĩa phần thân bảng, thường chứa thẻ <tr> và <td>
        - <tfoot>: table footer: chân bảng, định nghĩa phần cuối bảng, thường chứa ô tổng kết, chú thích or thông tin cuối cùng
        - colspan : chỉ định phần tử chiếm bnhiu CỘT
        - rowspan: chỉ định phần tử chiếm bnhiu HÀNG
<span>: tách từ trong đoạn

/------------------------------------------------//
- Có 3 nơi có thể đặt css

-> Inline: css nội tuyến <tag style="css">

-> Internal: css nội bộ: <style>css<style>, h1... là các selector -> tác động lên toàn bộ 1 thẻ dc chọn

-> External: css bên ngoài: <link href="style.css"> -> viết mã css thành 1 tệp .css riêng -> trên head gõ link:css -> nhấn vào style.css ctrl+click để tạo file style.css

---> ĐỘ ưu tiên : Inline  cao nhất -> Internal or External (tk nào viết sau tk đó định nghĩa)

- Opacity: quy định độ trong suốt (0 -> 100% / 0 -> 1.0 : mờ -> rõ nhất) nhưng vẫn có thể tương tác, vẫn chiếm ko gian

- Display: none -> ẩn phần tử khỏi giao diện (xóa cả ko gian nó chiếm)

- Visibility: ẩn or hiện element: ko tương tác dc nhưng vẫn chiếm ko gian

Type                    | opacity: 0 | display: none | visibility: hidden
-------------------------------------------------------------------------
Ẩn khỏi giao diện       |     ✓      |       ✓       |         ✓
Chiếm ko gian           |     ✓      |       ✗       |         ✓
Có thể tương tác        |     ✓      |       ✗       |         ✗
Ẩn phần tử con          |     ✓      |       ✓       |         ✓
Tính thừa kế            |     ✗      |       ✓       |         ✓
Hiển thị phần tử con    |     ✗      |       ✗       |         ✓ :hiển thị riêng lẻ các phần tử con trong câu...
Hỗ trợ Animations       |      ✓     |       ✗       |         ✓  

- Thêm favicon: nhập trên head link:favicon -> 

- id: để chọn 1 phần tử nhất định( sử dụng bên style thì dùng #<ten_id>)

- class: do ko sd lại tên id -> mún khai báo trùng lặp thì dùng class -> bên style dùng .<tên_class> -
        -> có thể khai báo nhìu class cùng thẻ cách nhau bởi dấu cách
- *selector: chọn tất cả element (style khai báo *)

- element.class: vd p.intro: chọn tất cả thẻ p có class là intro

- , selector: liệt kê selector

- .class1.class2 (ko có cách): chọn tất cả các thẻ có đồng thời class name là name1 và name2

- space selector: vd div p: chọn tất cả thẻ p nằm trong thẻ div
        -> selector1 [space] selector2: selector2 là con của selector1

- element>element: vd div > p : chọn tất cả thẻ p là con trực tiếp của thẻ div
        -> selector1 > selector2: selector2 là con trực tiếp của selector1
        -> con trực tiếp: thẻ thụt vào 1 cấp so vs thẻ trc

- element + element: vd: div + p: Chọn phần tử <p> đặt ngay sau phần tử <div>
        -> selector1 + selector2: s2 đầu tiên sát ngay sau s1
        -> Sát ngay sau: dòng dưới sát lun

- element ~ element: vd: div ~ p: chọn tất cả thẻ p nằm sau thẻ div
        -> selector1 ~ selector2: tất cả s2 nằm sau s1
        -> Nằm sau: ở sau là dc
        
- attribute [target]: chọn tất cả thẻ có thuộc tính target

- attribute = value: [target = "_blank"]: chọn tất cả thuộc tính có chính xác giá trị targer = _blank

- [attribute~=value]: [title~="flower"]: Chọn tất cả các thuộc tính title chứa từ flower

- [attribute*=value]: [title *= "pic"]: chọn tất cả thuộc tính title chứa chuỗi pic trong giá trị, vd: pic 123, picccc...

- [attribute|=value]: [title |= "pic"]: chọn tất cả thuộc tính title có từ duy nhất bắt đầu = từ pic: vd: pic, pic-123... (có chính xác giá trị mà từ pic bắt đầu)
        -> pic đứng đơn lẻ hoặc từ pic đứng đầu và các từ sau nối với pic = dấu -
- [attribute^=value]: [title ^= "pic"]: chọn tất cả các thẻ có title bắt đầu bằng từ pic (ko quan tâm có space ở sau)

- [attribute$=value]: [title $= "c"]: chọn tất cả các thẻ có title kết thúc bằng kí tự c
        ->kết thúc = j cx dc

- Pseudo class: lớp giả: định nghĩa 1 trạng thái đặc biệt của 1 phần tử
        -> cú pháp: selector: Pseudo-classes{
                                 khối lệnh css
                                 property: value;
                                }

- :hover: vd: a : hover -> chọn các thẻ a khi di chuột qua

- :active: vd: a : active -> chọn các thẻ a khi nhấn giữ chuột

- :link: vd: a : link -> chọn các thẻ a có liên kết chưa click vào

- :visited: vd: a : visited -> chọn các thẻ a có liên kết đã truy cập

- :empty: vd: div: empty -> chọn các thẻ div ko có nội dung

- :target: vd: #home:target -> chọn thẻ có id = "home" khi trên url có hash tương ứng. vd: https://domain.com/#home

- :first-child: vd: p:first-child: chọn các thẻ p là thẻ con đầu tiên

- :last-child: vd: p:last-child: chọn các thẻ p là thẻ con cuối cùng

- :nth-child(n): vd: p:nth-child(2): chọn các thẻ p là thẻ con thứ 2 từ trên xuống
( có thể dùng odd: nhảy theo n lẻ, even: nhảy theo n chẵn, 2n+1: để nhảy theo step mong muốn)

- :nth-last-child(n): vd: p:nth-last-child(2): chọn các thẻ p là thẻ con thứ 2 từ cuối lên

- :only-child: vd: p:only-child: chọn các thẻ p là thẻ con duy nhất
        -> p là thẻ con duy nhất <=> chỉ có duy nhất 1 thẻ p trong khối

- :first-of-type: vd: p:first-of-type: chọn thẻ p xuất hiện đầu tiên trong thẻ cha

- :last-of-type: vd: p:last-of-type: chọn thẻ p xuất hiện cuối cùng trong thẻ cha

- :nth-of-type(2): vd: p:nth-of-type(2): chọn thẻ p xuất hiện thứ 2 trong thẻ cha

- :nth-last-of-type(2): vd: p:nth-last-of-type(2): chọn thẻ p xuất hiện thứ 2 trong thẻ cha từ dưới lên

- :only-of-type: vd: p:only-of-type: chọn thẻ p xuất hiện duy nhất trong thẻ cha

- :not(selector): vd: .top:not(p): chọn các thẻ trong class = "top" loại trừ các thẻ p

- Thứ tự ưu tiên
        1. !important
        2. inline style
        3. id(#) selector
        4. class(.) hoặc pseudo classes (:) selector
        5. element selector(h, li, div..)
        6. universal selector(*): bộ chọn chung

----------------
- Box model: trình duyệt coi mỗi phần tử là 1 box - hình chữ nhật
        -> 4 phần
                1. Nội dung(width, heigth) -> hình ảnh, text, video...
                2. padding -> khoảng đệm nội dung và viền -> khoảng ko chứa nội dung
                3. border -> viền của phần tử (nét liền, đứt)
                4. margin -> khoảng cách vs các phần tử liền kề khác
        --> kích thước cao * rộng của 1 phần tử  = content + padding + border (ko bao gồm margin)
- padding: phần đệm
        -> các cách khai báo:
        
                /* (trên dưới) - (trái, phải) */
                /* padding: 20px 10px; */

                /* trên - (trái, phải) - dưới */
                /* padding: 20px 15px 25px; */

                /* trên - phải - dưới - trái */
                padding: 10px 20px 30px 40px;

- border: cú pháp: border: <độ rộng> <kiểu viển> <màu viền>
        1. dashed: dg đứt nét
        2. dotted: viền là các chấm dotted
        3. 2 đg viền // liền nhau
        4. groove: viền 3d (dg rãnh)
        5. ridge: viền 3d (nhấp nhô)
        6. inset: viền 3d
        7. outset: viền 3d
        8. solid: viền rắn
        9. hidden: Ẩn
        10. mix: ghép các kiểu viền lại

- border-radius: bo góc 
        1. top-left
        2. top-right
        3. bottom - left
        4. bottom-right

- text-align: center; để canh giữa nội dung

- margin: 0 auto; để đưa phần tử ra giữa trang web

- margin collapse:
        TH1.  là hiện tượng chồng lặp thuộc tính margin khi 2 PHẦN TỬ LIỀN KỀ cùng 
        thiết lặp margin vs phần tử còn lại THEO CHIỀU DỌC(theo chiều ngang ko bị)
        -> ví dụ: margin-top: 50px;
                  margin-bottom: 70px;
                  -> 2 khối cách nhau 70px thôi
        --->Cách khắc phục
        1. thiết lập margin 1 chiều
        2. thêm thuộc tính display = flex vào thẻ cha chứa 2 phần tử đấy

        TH2: xảy ra vs các phần tử có quan hệ cha con-> khi set margin cùng chiều cho thẻ cha và thẻ con thì 
        sẽ bị collapse(kết hợp). kích thước nào lớn hơn thì quyết định

- display: block: chiếm hết 1 dòng
- display: inline: vừa đủ phần tử

- outline: dg viền bao quanh mép ngoài cùng của đối tượng
        -> ko lm tăng thêm kích thước phần tử
        -> đơn giản là 1 vùng bao bên ngoài, chiếm cả vào phần margin( từ border ra ngoài đè lên margin) -> là lớp phủ bên ngoài
        -> ko áp dụng vẽ theo nhiều chiều như border
        -> có thêm thuộc tính outline-offset -> tách ra khỏi phần tử kích thước box ra ngoài

- box sizing: content-box và border Box(dc sd thường vì để khớp kích thước vs thiết kế, tránh tính toán lại phần nội dung)
        -> content-box: width, hight là kích thước của content -> bị thay đổi kích thước phần tử khi edit 
        -> border-box: width, hight là kích thước của phần tử(1 box) -> ko thay đổi kích thước phần tử khi chỉnh sửa các thuộc tính khác
        -> ko sửa box-sizing: web mặc định là content box


- CSS default value: trình duyệt sẽ tự thêm vào các thuộc tính mặc định để hiển thị các thẻ cơ bản đã học
Tuy nhiên những trình duyệt khác nhau sẽ có những thuộc tính mặc định khác nhau
Có những CSS mặc định lm khó khăn trong việc kiểm soát kích thước và tính toán kích thước khi thiết kế
--> Reset CSS

- Các thẻ HTML đều có thuộc tính display là block, inline, và inline-block
        -> các thẻ html đều có display mặc định là block và inline
        -> 
- Block element: các thẻ  ở trạng thái mặc định luôn chiếm 100% chiều rộng của thẻ cha bất kể nội dung dài hay ngắn. vd: div, p, h1, h2, ul, ol...

- Inline(nằm trong lòng) element: hộp có kích thước phụ thuộc vào nội dung bên trong nó. vd: a, strong, em, button...
        -> Chú ý: 1 số thuộc tính CSS ko áp dụng dc vs inline element
                1. padding-top và padding-bottom
                2. margin-top và margin-bottom
                3. width, height, min-width, min-height
        -> Sở dĩ inline element ko áp dụng dc 1 số thuộc tính trên vì nó sinh ra để nằm trên cùng 1 hàng, và để tránh phá 
        vỡ cấu trúc dòng.
        -> Muốn thay đổi inline thì thêm dòng display: inline-block 

- Pixel: picture element(thành phần hình ảnh)- điểm ảnh: là 1 kích thước cơ bản để đo hình ảnh kĩ thuật số
        -> Độ rộng tuyệt đối: ko đổi khi thay đổi kích thước trang - cố định, chiều dài được biểu thị trong bất kỳ đơn vị nào trong số này sẽ xuất hiện chính xác là kích thước đó.
                -> Đơn vị độ dài tuyệt đối không được khuyến khích sử dụng trên màn hình, vì kích thước màn hình khác nhau rất nhiều. Tuy nhiên, chúng có thể được sử dụng nếu môi trường đầu ra được biết đến, 
                chẳng hạn như Đối với bố cục in.

        -> Độ rộng tương đối: đổi khi thay đổi kích thước trang(em. rem...)

- %: vd 12%: kích thước = 12% phần tử cha.
        -> Nếu thẻ cha ko có kích thước thì sẽ lấy kích thước mặc định của trình duyệt, vd font-size mặc định của trình duyệt là 16px
        -> Thẻ body sẽ tự co lại chiều cao cho khớp vs các phần tử (muốn con = bnhiu % thì body phải có chiều cao(px))

- vw: viewport width: chiều rộng khung nhìn. vd: 50vw: 50% chiều rộng khung nhìn (viewport- phần hiển thị trên browser) -> chỉ so vs viewport ko so vs thẻ cha

- vh: viewport height: chiều cao khung nhìn. vd: 50vh: 50% chiều cao khung nhìn (viewport- phần hiển thị trên browser)

- em: vd: 2em: kích thước gấp 2 lần font chữ hiện tại(có kế thừa)
        -> TH1. Thẻ cha và thẻ con ko có font-size -> lấy kích thước font-size của root(từ thể html- thường là 16px)
        -> TH2. Thẻ cha có font-size tuyệt đối -> kế thừa font-size của thẻ cha
        -> TH3. Thẻ cha và thẻ con đều đặt font-size -> ưu tiên font-size hiện tại của chính nó
        -> TH4. Thẻ cha có font-size tương đối
                -> thẻ cha sẽ lấy kích thước mặc định từ trình duyệt(thẻ html gốc 16px)
                -> thẻ con tiếp tục kế thừa từ thẻ cha

- rem: vd: 2rem: kích thước gấp 2 lần font chữ root element(ko kế thừa) -> size của thẻ html gốc (16px)
        -> đổi theo cỡ chữ cở trình duyệt
        -> dễ quản lí, chỉ cần thay đổi font-size thẻ html gốc còn lại tất cả giữ nguyên tỉ lệ
----> Quy đổi pixel sang rem 
        -> Thông thường 1 rem = 16px
        -> Cần đổi sang tỉ lệ 1 rem = 10px
        -> 10/16 * 100 = 62.5%
        -> Cần giảm font-size của html xuống 62.5% 

- CSS color:
        1. rgb :red  green   blue
           rgb(255,   0,      0)
           rgb(0,    255,      0)
           rgb(0,      0,     255)
           or rgb(255 0 0) : bỏ , = space
        
        2. RGBA(red  green  blue  alpha) //alpha: 0 | 1 : 0 là mờ nhất -> 1 là đậm nhất
        -> viết tắt phải thêm / trc alpha. vd rgb(255 0 255 /0.5)

        3. Hệ màu hex(hệ thập lục phân)
        -> #rrggbb: 2 kí tự đầu là red
                    2 kí tự giữa là green
                    2 kí tự cuối là blue
        -> giá trị mỗi kênh màu chạy từ 00 - FF (rgb chạy từ 0 -> 255)
        -> nếu kênh màu có 2 kí tự giống nhau thì rút gọn lại còn 1. vd #ff00ff = #f0f
        -> Vẫn có kênh alpha : 2 kí tự cuối chạy từ 00 -> ff. vd #00ffcccc

        4. Color name: vd deeppink

        5. CurrentColor -> dùng lại màu dg dùng

---> Màu xám ở ngoài cùng bên trái nên sẽ theo cặp giống nhau. vd: ccc, d3d3d3

- Các kiểu font chữ thường sử dụng trong lập trình web
        1. Sans serif: kiểu ko chân -> phần nội dung
        2. serif: có chân -> thường phần tiêu đề
        3. Monospace: cùng độ rộng, chiều ngang mọi chữ cái đều = nhau -> code
        -> Mỗi kiểu font(Font family) sẽ có những font name tương ứng (Font name là tên của nhóm họ font)

- System font: font chữ có sẵn trên hệ thống -> khi sử dụng System font có sẵn trên máy khách hàng để tối ưu hóa truy cập, đẩy nhanh tốc độ tải trang

- Css inheritance - kế thừa: Các phần tử con nhận được giá trị thuộc tính thừa kế từ phần tử cha
-> Các thuộc tính có kế thừa thường liên quan đến văn bản
        1. font-family
        2. font-size
        3. font-weight
        4. font-style
        5. color
        6. text-align
        7. line-height
        8. letter-spacing...

- preconnect: mở kết nối đến máy chủ để tải tài nguyên nhanh hơn

- font-weight: độ dày của chữ (thường từ 100 - 900)

- line-height: chiều cao dòng.vd line-height: 1.5/150%: khoảng cách dòng = 1.5 lần font-size
        -> có thể dùng line-height để căn giữa -> cho LH = height của thẻ

//Bài 51--------------------------------------------
- letter spacing: tăng giảm khoảng cách giữa các kí tự

- word spacing: tăng giảm khoảng cách giữa các từ

- text align: căn text
        1. = justify: căn dàn đều 2 bên
        2. = left: căn trái - mặc định
        3. = right: căn phải
        4. = center: căn giữa
---> chỉ căn text so với box chứa nó (thường là thẻ display = block)

//Bài 52------------------------------------------
- Text decoration: gạch chân
        1. = none: bỏ gạch chân
        2. = underline: thêm gạch chân
        3. = line-through: thêm gạch ngang từ
        4. = overline: gạch trên đầu
        5. = <underline> <kiểu dấu gạch> <màu sắc> <kích thước>: tự định dạng gạch chân
        6. kết hợp lại kiểu dc

- text indent: thụt lề

- text transform: đổi kiểu chữ
        1. = capitalize: viết hoa chữ cái đâù mỗi từ
        2. = lowercase: viết thường toàn bộ
        3. = uppercase: viết hoa toàn bộ

//Bài 53------------------------------------------   
- white space: quy định về khoảng trắng
        -> Ngoại trừ thẻ <pre> giữ nguyên định dạng code
        a. trong code có nhiều khoảng trắng     -> 1 khoảng trắng
        b. nhiều dấu xuống dòng                 -> 1 khoảng trắng
        c. nội dung quá dài, chạm tới lề        -> xuống dòng
--->Cách dùng
        1. = normal: trạng thái mặc định
        2. = nowrap: ko xuống dòng (kể cả chạm tới lề)
        3. = pre: giữ nguyên định dạng (giống thẻ pre)
        4. = pre-line: giữ nguyên định dạng theo line(enter);
                -> Tất cả dấu khoảng trắng thừa mỗi dòng trong nội dung văn bản sẽ bị loại bỏ
                -> Dòng mới (xuống dòng) được giữ nguyên
        5. = pre-wrap: giữ nguyên định dạng code
                -> Tất cả dấu cách thừa ở trong nội dung văn bản dc giữ nguyên
                -> dòng mới(xuống dòng) được giữ nguyên
                -> chạm tới lề -> tự động xuống dòng

- word break: Khi đoạn text or link dài, ng dùng nhập liền nhau(ko có khoảng trắng) thì có thể gây vỡ giao diện vì text ko bị xuống dòng
-> có thể dùng thuộc tính word break: break all để bẻ xuống dòng

//Bài 54------------------------------------------------
- text shadow: bóng đổ text
-> text-shadow: <horizontal> <vertical> <blur> <color>
        -> horizontal: trục nằm ngang(Ox)
                -> 10px: dịch bóng sang phải 10px
                -> -10px: dịch bóng sang trái 10px
        -> vertical:trục thẳng (Oy)
                -> 10px: dịch bóng xuống dưới 10px
                -> -10px: dịch bóng lên trên 10px
        -> blur: độ nhòe

- overflow: xử lí phần thừa văn bản
        1. visible(default): Thuộc tính mặc định hiển thị nội dung kể cả vượt box chứa
        2. hidden: ẩn nội dung khi nội dung vượt box chứa
        3. scroll: tạo thanh cuộn, luôn hiển thị vùng thanh cuốn
        4. auto: Nếu nội dung ngắn -> ko có scroll bar
                 Nếu nội dung dài, vượt box chứa -> tự động sinh scroll bar


//Bài 55-------------------------------------------

- overscroll-behavior:  Là 1 thuộc tính CSS dùng để điều chỉnh các trình duyệt xử lí sự kiện
"overscrolling" , tức là ng dùng cuộn trang đến khi ko còn nội dung nữa 
        1. overscroll-behavior: auto; -> lăn hết scroll con lăn lun scroll bự
        2. overscroll-behavior: contain; -> lăn trong giới hạn box , ko kéo theo box ngoài
        3. overscroll-behavior: none; -> lăn hết box thì trỏ chuột ra ngoài lăn tiếp, chỉ khác khi sử dụng mobile
---->Các giá trị khác
        /* Keyword values */
overscroll-behavior: auto; /* default */
overscroll-behavior: contain;
overscroll-behavior: none;

/* Two values */
overscroll-behavior: none auto;
overscroll-behavior: auto contain;

/* Global values */
overscroll-behavior: inherit; -> mặc định là auto
overscroll-behavior: initial; -> thông qua giá trị của cha
overscroll-behavior: revert;
overscroll-behavior: unset;

- custom - scrollbar: tùy biến thanh cuộn
--> 
/* width -> độ rộng của scrollbar */
::-webkit-scrollbar {
    width: 10px;
    /* border-radius: 5px; */
  }
  
  /* Track -> hộp màu xám chứa thanh cuộn*/
  ::-webkit-scrollbar-track {
    background: rgba(142, 168, 180, 0.589);
    border-radius: 5px;
  }
  
  /* Handle -> cái thanh sờ vào để kéo */
  ::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 5px;
  }
  
  /* Handle on hover -> cái hành động khi ta di chuột vào*/
  ::-webkit-scrollbar-thumb:hover {
    background: #2011a5cc;
  }

--> Nếu chỉ để dấu :: thì nó áp dụng cho tất cả thanh cuộn
        -> Muốn chỉ định thanh cuộn nào thì thêm tên class trc all dấu ::


//Bài 56--------------------------------------------

- text-overflow: tạo dấu ... khi nội dung dài
--->  Làm dấu ... ở dòng thứ 2, 3... -> bỏ đoạn code này vào
{
  -webkit-line-clamp: 2; //vượt quá 2 dòng thì hiển thị ...
  -webkit-box-orient: vertical;
  display: -webkit-box;

}

//Bài 57------------------------------------------------

- Font awesome: web thêm biểu tượng cho trang web

- list-style-type: none: để xóa dấu chấm trong trong thẻ li

//Bài 58------------------------------------------------

- background-color: 1. transparent: trong suốt
                    2. red: dùng tên màu
                    3. rgb()
                    4. #ff00ff
                    5. CurrentColor
--> Nền sẽ đổ vào toàn bộ các phần tính vào kích thước phần tử (border, padding, content)

//Bài 59-----------------------------------------------

- background image: thêm hình nền
--> Ở trạng thái mặc định, hình ảnh sẽ bị lặp vô hạn đến khi chiếm hết kích thước thẻ chứa nó
        -> none để loại bỏ ảnh nền

- background-repeat: 
        1. = repeat     -> BG lặp lại (mặc định)
        2. = no-repeat  -> BG ko lặp lại
        3. = repeat-x   -> BG lặp lại theo trục x (lặp theo chiều ngang)
        4. = repeat-y   -> BG lặp theo trục y(lặp theo chiều dọc) 

-->Lợi ích: có thể tạo ra nền đồng nhất từ 1 bức ảnh -> chiếm ít dung lượng

- Xếp nhiều hình ảnh : ảnh xếp trc nằm trên, ảnh xếp sau nằm dưới
        -> ảnh trên jpg thì sẽ che luôn ảnh sau -> nên để bg trong suốt để thấy ảnh sau(.png...)

//Bài 60----------------------------------------------

- background size: điều chỉnh kích thước của ảnh nền
        -> khi chưa set kích cỡ thì ảnh sẽ hiển thị tỉ lệ 1:1
        1. = contain: - ảnh vừa khung hình
                      - Giữ nguyên tỉ lệ ảnh
                      - ko bị mất ảnh
                      - nếu còn khoảng trống, ảnh sẽ bị lặp lại

        2. = cover:   - ảnh vừa khớp khung hình (kéo vừa khung)
        (giống canva) - giữ nguyên tỉ lệ ảnh(ko bị méo)
                      - có thể mất 1 phần ảnh bị thừa
                      - ko bị lặp ảnh
                
- background-size: 100px -> chiều rộng sẽ là 100px (1 đối số)
                   100px(%) 100px(%) -> chiều cao = chiều rộng = 100px(%) (có thể bị dãn/méo ảnh nếu thừa/thiếu 1 cạnh (%), or có thể bị lặp ảnh nếu thừa(px))


//Bài 61-----------------------------------------------

- background position: vị trí bắt đầu đặt ảnh nền
-->Các vị trí đặt ảnh nền
        top left        top         top right

        left            center       right

        bottom left     bottom       bottom right

--> sử dụng đơn vị % -> vượt thì lặp lại, no-repeat thì nền trắng

 0% 0% -------X----------->100% 0%
   |
   |
   |
   y
   |
   |
0% 100%                    100% 100%

--> sử dụng tọa độ cụ thể(px...)
0 0: gốc trên bên trái của box chứa

 0 0 -------X----------->
   |
   |
   |
   y
   |
   |
  
//Bài 62--------------------------------------------------

- linear gradient: tạo dải màu chuyển sắc
--> cú pháp:
        background-image: linear-gradient(direction, color-stop1, color-stop2)

        -> bắt buộc phải có ít nhất 2 màu(color)
        ->stop1, stop2 : % ko áp dụng chuyển sắc từng màu (từ 0 -> stop1(%) của box: trình duyệt sẽ giữ nguyên màu ban đầu, stop2: bắt đầu từ stop2 % thì ko chuyển màu -> tạo ranh giới)
        -> direction: top to bottom(default)
        to top left       to top(0 deg)         to top right (45)

        to left(-90 deg)                                 to right(90 deg)

        to bottom left     to bottom(180 deg)     to bottom right
- repeating-linear-gradient: để lặp dãy màu

//Bài 63--------------------------------------------------

- background attachment: 
        1. scroll (default): ảnh sẽ tự động cuộn theo trình duyệt khi kéo xuống
        2. fixed: ảnh cố định khi kéo scroll xuống (cái box di chuyển nhưng hình ảnh giữ nguyên)
        3. local: ảnh cố định cục bộ trong bố cục con (kéo nội dung ảnh sẽ cuốn theo)

//Bài 64--------------------------------------------------

- background clip: quy định vùng đổ nền
        1. border-box(default): Ảnh sẽ đổ full kích thước phần tử (content + padding + border) đổ từ border vào trong
        2. padding- box: ảnh chỉ đổ đến padding (đổ padđing vào trong)
        3. content-box: ảnh chỉ đổ phần content 

- background-clip: text: để đổ nền text: đổ màu nền phần text, ko hiển thị phần trống ngoài text
        -> -webkit-background-clip: text; để hổ trợ nhiều trình duyệt hơn

/* Kiểm tra xem trình duyệt có hỗ trợ thuộc tính này ko có thì thực hiện đoạn lệnh trong {}*/
/* @supports (background-clip: text) or (-webkit-background-clip: text) {
  .text_hightline {
    color: transparent;
    background-color: pink;
    background-image: linear-gradient(rgb(115, 222, 255), rgb(107, 235, 23));
    background-clip: text;
    -webkit-background-clip: text;
  }
} */


//Bài 65------------------------------------------------

- background origin: xác định bức ảnh đặt ở vị trí nào
        1. border-box: gốc 0, 0 của ảnh sẽ ở border
        2. padding-box: default - gốc ảnh mặc định ở phần padding
        3. content-box: gốc 0, 0 của ảnh sẽ ở phần content

//Bài 66------------------------------------------------

-->Cú pháp viết tắt của background
background: bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment
vd: background: red url(./bg/1.PNG) left/contain no-repeat padding-box border-box fixed;

//Bài 67-------------------------------------------------

- backdrop filter: bộ lọc phông nền -> ứng dụng các hiệu ứng đồ họa cho vùng phía sau
        1. blur: độ nhòe
        2. invert: đảo ngc Màu
        3. sepia: chuyển màu cổ điển
        4. brightness: sáng tối
        5. contrast: tương phản
        6. drop-shadow: đổ bóng
        7. grayscale: chế độ màu xám
        8. hue-rotate: thay đổi ram Màu
        9. saturate:  độ bão hòa

-->ví dụ nhiều bộ lọc

backdrop-filter: url(filters.svg#filter) blur(4px) saturate(150%);

//Bài 68---------------------------------------------------

-Clip path: tạo ra 1 vùng cắt, nội dung bên trong vùng cắt sẽ dc hiển thị, nội dung bên ngoài vùng cắt sẽ bị ẩn đi (avt)
        1. circle(<bán kính hình tròn px/%>): hình tròn
                -> vd: 50% = 50% * max(width, height);
                -> dịch tâm đường tròn theo x, y. vd: circle(40%(R) at 40%(x) 50%(y)) -> mặc định x = 50% và y = 50%
        2. inset(): hình chữ nhật
                a. Một đối số: đều 4 cạnh
                b. 2 đối số: trên-dưới / trái-phải
                c. 3 đối số: trên / trái - phải / dưới
                d. 4 đối số: theo chiều kim đồng hồ
                e. thêm bo góc khai báo sau Keyword: round (cũng dc 4 đối số cut theo góc như border-radius)
        3. polygon(): cắt hình đa giác
                ->Cú pháp chung: cặp x,y là các cặp tọa độ các góc theo x,y
                -> clip-path: polygon(x y, x y, x y);
                -> vd: clip-path: polygon(0 0, 100% 0%, 100% 100%, 30% 100%);


--> 
 0% 0% -------X----------->100% 0%
   |                        |
   |                        |   
   |                        |
   y           (ẢNH)        |   
   |                        |
   |                        |
0% 100% -------------------- 100% 100%
