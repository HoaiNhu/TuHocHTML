//Code pen để tập code html: https://codepen.io/
//mdn web docs: để học thẻ: https://developer.mozilla.org/en-US/
//web archieve để xem giao diện của tất cả các web trên thế giới
//web diffchecker để so sánh code: https://www.diffchecker.com/
//web emmet -> cheat sheet: https://docs.emmet.io/cheat-sheet/
//web unplash để lấy hình ảnh: https://unsplash.com/
//web html entities list -> thể hiển ký tự đặc biệt trong web (UTF - 8 thì có thể hiển thị emoji lun ): https://www.freeformatter.com/html-entities.html
//web codebeauty, search html escape.. -> chuyển code thành entities: https://codebeautify.org/html-escape-unescape#google_vignette
//Internal css w3school để chèn css: https://www.w3schools.com/CSS/css_howto.asp
//css reference w3c: để tham khảo thuộc tính css: https://www.w3schools.com/cssref/index.php
/web make favicon online -> tạo favicon -> lấy code dán dô head: https://www.favicon-generator.org/
//vendor prefix css -> tìm prefix : https://www.geeksforgeeks.org/explain-css-vendor-prefixes/
//autop prefix: https://autoprefixer.github.io/
//Caniuse.com : kiểm tra thuộc tính có cần sử dụng prefix ko để hổ trợ đa trình duyệt: https://caniuse.com/
//HTMl table basic: học về bảng: https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Basics
//PrimJS: học thêm dìa css: https://prismjs.com/
//css selector w3c: học selector: https://www.w3schools.com/cssref/css_selectors.php
//validator html: kiểm tra code có bị trùng ko: https://validator.w3.org/#validate_by_input
//css selector: học selector : https://www.w3schools.com/CSS/css_selectors.asp
//pseudo classes: https://www.w3schools.com/css/css_pseudo_classes.asp , https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
//css specificity: học độ ưu tiên: https://www.w3schools.com/css/css_specificity.asp
//game.tuhoc.cc: để luyện tập: 
/css border: xem kiểu viền: https://www.w3schools.com/css/css_border.asp
//default css values: học thuộc tính mặc định của element: https://www.w3schools.com/cssref/css_default_values.php
//WEb reset css: https://meyerweb.com/eric/tools/css/reset/
//html block inline element: https://www.w3schools.com/htmL/html_blocks.asp
//CSS units: https://www.w3schools.com/cssref/css_units.php
//Color name: https://htmlcolorcodes.com/color-names/
//Google Fonts: https://fonts.google.com/?preview.layout=grid
//System Font stack: https://css-tricks.com/snippets/css/system-font-stack/
//Css font stack: https://www.cssfontstack.com/
//css <tên thuộc tính> property: kiểm tra có kế thừa ko
//typography in css: https://cssreference.io/typography/
//css generator: chỉnh shadow: https://cssgenerator.org/text-shadow-css-generator.html
//overscroll-behavior: https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior , https://css-tricks.com/almanac/properties/o/overscroll-behavior/
//custom scrollbar: https://www.w3schools.com/howto/howto_css_custom_scrollbar.asp
//awesome font cdn:  lấy link để nhúng icon: https://cdnjs.com/libraries/font-awesome
//font awesome: lấy icon: https://fontawesome.com/icons
//linear gradient: css gradient: https://www.w3schools.com/css/css3_gradients.asp
//css gradient.io: tạo dải màu chuyển sắc: https://cssgradient.io/gradient-backgrounds/
//css background property: học viết tắt background: https://www.w3schools.com/cssref/css3_pr_background.php
//backdrop filter: hiệu ứng cho nền phía sau: https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter
//css clip path: tạo hình đa giác: https://www.cssportal.com/css-clip-path-generator/
//box shadow css generator: tạo box shadow: https://cssgenerator.org/box-shadow-css-generator.html , https://box-shadow.dev/, có sẵn: https://getcssscan.com/css-box-shadow-examples
//tài liệu box shadow: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
//pseudo element: https://www.w3schools.com/CSS/css_pseudo_elements.asp
//css counter: tạo bộ đếm, đánh dấu phần thư mục: https://www.w3schools.com/CSS/css_counters.asp
//css flexbox csstrick: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
//css grid: tạo lưới grid: https://game.tuhoc.cc/css-grid-generator/
//html sematic: thẻ có ngữ nghĩa: https://developer.mozilla.org/en-US/docs/Glossary/Semantics
//tailwind css: làm css nhanh: https://tailwindcss.com/
//bootstrap: framework mã nguồn mã dc thiết kế sẵn: https://getbootstrap.com/
//media query mozilla: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries
//xem animation: https://uiverse.io/











//shift + 1 + tap để tạo cấu trúc file html
lang="en" //khai báo cho trình duyệt biết đang dùng ngôn ngữ nào
<head> :- chứa thông tin của trang web mà ko dc hiển thị trực tiếp lên trình duyệt của user
        - chứa thông tin như tiêu đề trang, từ khóa, thông tin tác giả, tập tin css và js ...
//bôi đen khối + alt + w để chèn thêm thẻ vào khối code đó
//ctrl + k + c : cmt
//ctrl + k + u: un cmt
//ctrl + d: chọn những từ giống nhau
//nhấn giữ alt để chọn nhìu dòng
//alt + shift + xuống: copy dòng trên xuống dòng dưới
//git branch: kiểm tra nhánh trên máy
//git branch -a: kiểm tra nhánh trên máy và trên github
//git branch -c <ten_nhanh>: tạo nhánh mới -> copy all code nhánh hiện tại qua nhánh mới
//git checkout <ten_nhanh>: chuyển nhánh làm việc -> code chỉ thay đổi ở nhánh dg lm 
//git checkout -b <ten_nhanh>: tạo và chuyển nhánh (lấy code cũ và commit )
//git push  -u(--set-upstream) origin <ten_nhanh>: đẩy code theo từng nhánh
//git branch -d <ten_nhanh>: xóa nhánh (ko xóa nhánh hiện tại và nhánh chưa push)
//git push -d origin <ten_nhanh>: push và xóa nhánh 
//git log (--online): xem lịch sử -> nhấn q để thoát 
//git checkout <id_commit>: trở về code cũ 
//Mẹo căn giữa:     /* căn giữa text giữa các khối */
    display: flex;
    justify-content: center;
    align-items: center;
//Game học flexbox:
        1 http://game.tuhoc.cc 
        2 https://mastery.games/flexboxzombies 
        3 https://knightsoftheflexboxtable.com 
        4 https://codingfantasy.com/games/flexboxadventure/play 
        5 http://www.flexboxdefense.com





<title> : tiêu đề trang web. vd: google, facebook...
Lorem9: sinh ra 9 ký tự ngẫu nhiên
Lorem*3: sinh ra 3 dòng
Lorem: 1 dòng 30 từ
<body>: chứa nd chính của web: văn bản, mã js, các định dạng...
<h1> - <h6>: định nghĩa tiêu đề trang
<p>: chứa các đoạn văn
<b>: bold: in đậm (dùng strong thay thế nội dung quan trọng - có ngữ nghĩa so với trình duyệt)
<i>: italic: in nghiêng (dùng em-emphasis để nhấn mạnh nội dung)
<u>: underline: gạch chân 
<a>: anchor: gắn kèm đường dẫn (link, mail, sdt)
        <!--Để trống href -> tải lại trang-->
        --> href = "#" : trở lên đầu trang
        --> ko nhập gì mặc định target = "_self"
        --> _blank: mở tab mới
        --> href = "tel:...": chuyển hướng đến app có thể gọi điện thoại
        --> href = "mailto:...": chuyển hướng đến app để gửi mail
                -> cc=: ds email nhận đc bản sao của mail(, để gửi nhìu ng)
                -> bcc: ds email ẩn sẽ nhận dc bản sao của thư (ko thấy ng trong to vs cc)
                -> subject: tiêu đề thư
                -> body: nội dung thư
                -> ?: dấu phân cách giữa phần mailto và tham số
                -> &: dấu phân cách tham số (không có dấu cách)
<img>: image: hình ảnh
        ->alt: hiển thị text khi lỗi hình ảnh/ hỗ trợ trình đọc màn hình cho ng khiếm thị/ công cụ tìm kiếm trên gg
        -> height và width= chiều cao và rộng của ảnh.vd width = "50" -> 50 pixel/ width = "50%" -> 50% của web
        -> thường xét 1 chìu height or width để ảnh ko vỡ
        -> path tương đối thường có ./ -> ./ để thấy file/folder cùng cấp (phụ thuộc vào vị trí đứng của thư mục hiện tại): tương lai thay đôi
        -> ../ để thấy file/folder trước (1 ../ là lùi 1 cấp)
        -> path tuyệt đối duyệt từ gốc (dùng /): tương lai ko đổi
<ul>: un-ordered list: danh sách ko có thứ tự
<ol>: ordered list: danh sách có thứ tự
<br>: break: ngắt dòng or phá vỡ - thẻ tự đóng (1 thẻ <br> or <br />)
<hr>: horizontal rule: tạo đường kẻ ngang  ngăn cách trên trang - thẻ tự đóng
<pre>: preformat: giữ nguyên định dạng văn bản vd: khoảng trắng, thụt đầu dòng
<code>: thẻ có ngữ nghĩa web sẽ hiểu nó đoạn code thật trên web
        --> Highlight code vs thư viện PrismJS
            -> thêm dòng nè trên <head>:     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-okaidia.min.css">
            -> Step 2: Thêm class="language-html" vào thẻ mở code -->
            -> <!-- Step3: Thêm đoạn code sau trước thẻ đóng </body> -->
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js"></script>
                         <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
<table>: để tạo bảng
        - <tr>: table row: 1 hàng
        - <td>: table data: 1 ô dữ liệu
        - <th>: table header: 1 ô tiêu đề
        - <thead>: table header: định nghĩa tiêu đề bảng, thường chứa các ô <th>
        - <tbody>: table body: định nghĩa phần thân bảng, thường chứa thẻ <tr> và <td>
        - <tfoot>: table footer: chân bảng, định nghĩa phần cuối bảng, thường chứa ô tổng kết, chú thích or thông tin cuối cùng
        - colspan : chỉ định phần tử chiếm bnhiu CỘT
        - rowspan: chỉ định phần tử chiếm bnhiu HÀNG
<span>: tách từ trong đoạn

/------------------------------------------------//
- Có 3 nơi có thể đặt css

-> Inline: css nội tuyến <tag style="css">

-> Internal: css nội bộ: <style>css<style>, h1... là các selector -> tác động lên toàn bộ 1 thẻ dc chọn

-> External: css bên ngoài: <link href="style.css"> -> viết mã css thành 1 tệp .css riêng -> trên head gõ link:css -> nhấn vào style.css ctrl+click để tạo file style.css

---> ĐỘ ưu tiên : Inline  cao nhất -> Internal or External (tk nào viết sau tk đó định nghĩa)

- Opacity: quy định độ trong suốt (0 -> 100% / 0 -> 1.0 : mờ -> rõ nhất) nhưng vẫn có thể tương tác, vẫn chiếm ko gian

- Display: none -> ẩn phần tử khỏi giao diện (xóa cả ko gian nó chiếm)

- Visibility: ẩn or hiện element: ko tương tác dc nhưng vẫn chiếm ko gian

Type                    | opacity: 0 | display: none | visibility: hidden
-------------------------------------------------------------------------
Ẩn khỏi giao diện       |     ✓      |       ✓       |         ✓
Chiếm ko gian           |     ✓      |       ✗       |         ✓
Có thể tương tác        |     ✓      |       ✗       |         ✗
Ẩn phần tử con          |     ✓      |       ✓       |         ✓
Tính thừa kế            |     ✗      |       ✓       |         ✓
Hiển thị phần tử con    |     ✗      |       ✗       |         ✓ :hiển thị riêng lẻ các phần tử con trong câu...
Hỗ trợ Animations       |      ✓     |       ✗       |         ✓  

- Thêm favicon: nhập trên head link:favicon -> 

- id: để chọn 1 phần tử nhất định( sử dụng bên style thì dùng #<ten_id>)

- class: do ko sd lại tên id -> mún khai báo trùng lặp thì dùng class -> bên style dùng .<tên_class> -
        -> có thể khai báo nhìu class cùng thẻ cách nhau bởi dấu cách
- *selector: chọn tất cả element (style khai báo *)

- element.class: vd p.intro: chọn tất cả thẻ p có class là intro

- , selector: liệt kê selector

- .class1.class2 (ko có cách): chọn tất cả các thẻ có đồng thời class name là name1 và name2

- space selector: vd div p: chọn tất cả thẻ p nằm trong thẻ div
        -> selector1 [space] selector2: selector2 là con của selector1

- element>element: vd div > p : chọn tất cả thẻ p là con trực tiếp của thẻ div
        -> selector1 > selector2: selector2 là con trực tiếp của selector1
        -> con trực tiếp: thẻ thụt vào 1 cấp so vs thẻ trc

- element + element: vd: div + p: Chọn phần tử <p> đặt ngay sau phần tử <div>
        -> selector1 + selector2: s2 đầu tiên sát ngay sau s1
        -> Sát ngay sau: dòng dưới sát lun

- element ~ element: vd: div ~ p: chọn tất cả thẻ p nằm sau thẻ div
        -> selector1 ~ selector2: tất cả s2 nằm sau s1
        -> Nằm sau: ở sau là dc
        
- attribute [target]: chọn tất cả thẻ có thuộc tính target

- attribute = value: [target = "_blank"]: chọn tất cả thuộc tính có chính xác giá trị targer = _blank

- [attribute~=value]: [title~="flower"]: Chọn tất cả các thuộc tính title chứa từ flower

- [attribute*=value]: [title *= "pic"]: chọn tất cả thuộc tính title chứa chuỗi pic trong giá trị, vd: pic 123, picccc...

- [attribute|=value]: [title |= "pic"]: chọn tất cả thuộc tính title có từ duy nhất bắt đầu = từ pic: vd: pic, pic-123... (có chính xác giá trị mà từ pic bắt đầu)
        -> pic đứng đơn lẻ hoặc từ pic đứng đầu và các từ sau nối với pic = dấu -
- [attribute^=value]: [title ^= "pic"]: chọn tất cả các thẻ có title bắt đầu bằng từ pic (ko quan tâm có space ở sau)

- [attribute$=value]: [title $= "c"]: chọn tất cả các thẻ có title kết thúc bằng kí tự c
        ->kết thúc = j cx dc

- Pseudo class: lớp giả: định nghĩa 1 trạng thái đặc biệt của 1 phần tử
        -> cú pháp: selector: Pseudo-classes{
                                 khối lệnh css
                                 property: value;
                                }

- :hover: vd: a : hover -> chọn các thẻ a khi di chuột qua

- :active: vd: a : active -> chọn các thẻ a khi nhấn giữ chuột

- :link: vd: a : link -> chọn các thẻ a có liên kết chưa click vào

- :visited: vd: a : visited -> chọn các thẻ a có liên kết đã truy cập

- :empty: vd: div: empty -> chọn các thẻ div ko có nội dung

- :target: vd: #home:target -> chọn thẻ có id = "home" khi trên url có hash tương ứng. vd: https://domain.com/#home

- :first-child: vd: p:first-child: chọn các thẻ p là thẻ con đầu tiên

- :last-child: vd: p:last-child: chọn các thẻ p là thẻ con cuối cùng

- :nth-child(n): vd: p:nth-child(2): chọn các thẻ p là thẻ con thứ 2 từ trên xuống
( có thể dùng odd: nhảy theo n lẻ, even: nhảy theo n chẵn, 2n+1: để nhảy theo step mong muốn)

- :nth-last-child(n): vd: p:nth-last-child(2): chọn các thẻ p là thẻ con thứ 2 từ cuối lên

- :only-child: vd: p:only-child: chọn các thẻ p là thẻ con duy nhất
        -> p là thẻ con duy nhất <=> chỉ có duy nhất 1 thẻ p trong khối

- :first-of-type: vd: p:first-of-type: chọn thẻ p xuất hiện đầu tiên trong thẻ cha

- :last-of-type: vd: p:last-of-type: chọn thẻ p xuất hiện cuối cùng trong thẻ cha

- :nth-of-type(2): vd: p:nth-of-type(2): chọn thẻ p xuất hiện thứ 2 trong thẻ cha

- :nth-last-of-type(2): vd: p:nth-last-of-type(2): chọn thẻ p xuất hiện thứ 2 trong thẻ cha từ dưới lên

- :only-of-type: vd: p:only-of-type: chọn thẻ p xuất hiện duy nhất trong thẻ cha

- :not(selector): vd: .top:not(p): chọn các thẻ trong class = "top" loại trừ các thẻ p

- Thứ tự ưu tiên
        1. !important
        2. inline style
        3. id(#) selector
        4. class(.) hoặc pseudo classes (:) selector
        5. element selector(h, li, div..)
        6. universal selector(*): bộ chọn chung

----------------
- Box model: trình duyệt coi mỗi phần tử là 1 box - hình chữ nhật
        -> 4 phần
                1. Nội dung(width, heigth) -> hình ảnh, text, video...
                2. padding -> khoảng đệm nội dung và viền -> khoảng ko chứa nội dung
                3. border -> viền của phần tử (nét liền, đứt)
                4. margin -> khoảng cách vs các phần tử liền kề khác
        --> kích thước cao * rộng của 1 phần tử  = content + padding + border (ko bao gồm margin)
- padding: phần đệm
        -> các cách khai báo:
        
                /* (trên dưới) - (trái, phải) */
                /* padding: 20px 10px; */

                /* trên - (trái, phải) - dưới */
                /* padding: 20px 15px 25px; */

                /* trên - phải - dưới - trái */
                padding: 10px 20px 30px 40px;

- border: cú pháp: border: <độ rộng> <kiểu viển> <màu viền>
        1. dashed: dg đứt nét
        2. dotted: viền là các chấm dotted
        3. 2 đg viền // liền nhau
        4. groove: viền 3d (dg rãnh)
        5. ridge: viền 3d (nhấp nhô)
        6. inset: viền 3d
        7. outset: viền 3d
        8. solid: viền rắn
        9. hidden: Ẩn
        10. mix: ghép các kiểu viền lại

- border-radius: bo góc 
        1. top-left
        2. top-right
        3. bottom - left
        4. bottom-right

- text-align: center; để canh giữa nội dung

- margin: 0 auto; để đưa phần tử ra giữa trang web

- margin collapse:
        TH1.  là hiện tượng chồng lặp thuộc tính margin khi 2 PHẦN TỬ LIỀN KỀ cùng 
        thiết lặp margin vs phần tử còn lại THEO CHIỀU DỌC(theo chiều ngang ko bị)
        -> ví dụ: margin-top: 50px;
                  margin-bottom: 70px;
                  -> 2 khối cách nhau 70px thôi
        --->Cách khắc phục
        1. thiết lập margin 1 chiều
        2. thêm thuộc tính display = flex vào thẻ cha chứa 2 phần tử đấy

        TH2: xảy ra vs các phần tử có quan hệ cha con-> khi set margin cùng chiều cho thẻ cha và thẻ con thì 
        sẽ bị collapse(kết hợp). kích thước nào lớn hơn thì quyết định

- display: block: chiếm hết 1 dòng
- display: inline: vừa đủ phần tử

- outline: dg viền bao quanh mép ngoài cùng của đối tượng
        -> ko lm tăng thêm kích thước phần tử
        -> đơn giản là 1 vùng bao bên ngoài, chiếm cả vào phần margin( từ border ra ngoài đè lên margin) -> là lớp phủ bên ngoài
        -> ko áp dụng vẽ theo nhiều chiều như border
        -> có thêm thuộc tính outline-offset -> tách ra khỏi phần tử kích thước box ra ngoài

- box sizing: content-box và border Box(dc sd thường vì để khớp kích thước vs thiết kế, tránh tính toán lại phần nội dung)
        -> content-box: width, hight là kích thước của content -> bị thay đổi kích thước phần tử khi edit 
        -> border-box: width, hight là kích thước của phần tử(1 box) -> ko thay đổi kích thước phần tử khi chỉnh sửa các thuộc tính khác
        -> ko sửa box-sizing: web mặc định là content box


- CSS default value: trình duyệt sẽ tự thêm vào các thuộc tính mặc định để hiển thị các thẻ cơ bản đã học
Tuy nhiên những trình duyệt khác nhau sẽ có những thuộc tính mặc định khác nhau
Có những CSS mặc định lm khó khăn trong việc kiểm soát kích thước và tính toán kích thước khi thiết kế
--> Reset CSS

- Các thẻ HTML đều có thuộc tính display là block, inline, và inline-block
        -> các thẻ html đều có display mặc định là block và inline
        -> 
- Block element: các thẻ  ở trạng thái mặc định luôn chiếm 100% chiều rộng của thẻ cha bất kể nội dung dài hay ngắn. vd: div, p, h1, h2, ul, ol...

- Inline(nằm trong lòng) element: hộp có kích thước phụ thuộc vào nội dung bên trong nó. vd: a, strong, em, button...
        -> Chú ý: 1 số thuộc tính CSS ko áp dụng dc vs inline element
                1. padding-top và padding-bottom
                2. margin-top và margin-bottom
                3. width, height, min-width, min-height
        -> Sở dĩ inline element ko áp dụng dc 1 số thuộc tính trên vì nó sinh ra để nằm trên cùng 1 hàng, và để tránh phá 
        vỡ cấu trúc dòng.
        -> Muốn thay đổi inline thì thêm dòng display: inline-block 

- Pixel: picture element(thành phần hình ảnh)- điểm ảnh: là 1 kích thước cơ bản để đo hình ảnh kĩ thuật số
        -> Độ rộng tuyệt đối: ko đổi khi thay đổi kích thước trang - cố định, chiều dài được biểu thị trong bất kỳ đơn vị nào trong số này sẽ xuất hiện chính xác là kích thước đó.
                -> Đơn vị độ dài tuyệt đối không được khuyến khích sử dụng trên màn hình, vì kích thước màn hình khác nhau rất nhiều. Tuy nhiên, chúng có thể được sử dụng nếu môi trường đầu ra được biết đến, 
                chẳng hạn như Đối với bố cục in.

        -> Độ rộng tương đối: đổi khi thay đổi kích thước trang(em. rem...)

- %: vd 12%: kích thước = 12% phần tử cha.
        -> Nếu thẻ cha ko có kích thước thì sẽ lấy kích thước mặc định của trình duyệt, vd font-size mặc định của trình duyệt là 16px
        -> Thẻ body sẽ tự co lại chiều cao cho khớp vs các phần tử (muốn con = bnhiu % thì body phải có chiều cao(px))

- vw: viewport width: chiều rộng khung nhìn. vd: 50vw: 50% chiều rộng khung nhìn (viewport- phần hiển thị trên browser) -> chỉ so vs viewport ko so vs thẻ cha

- vh: viewport height: chiều cao khung nhìn. vd: 50vh: 50% chiều cao khung nhìn (viewport- phần hiển thị trên browser)

- em: vd: 2em: kích thước gấp 2 lần font chữ hiện tại(có kế thừa)
        -> TH1. Thẻ cha và thẻ con ko có font-size -> lấy kích thước font-size của root(từ thể html- thường là 16px)
        -> TH2. Thẻ cha có font-size tuyệt đối -> kế thừa font-size của thẻ cha
        -> TH3. Thẻ cha và thẻ con đều đặt font-size -> ưu tiên font-size hiện tại của chính nó
        -> TH4. Thẻ cha có font-size tương đối
                -> thẻ cha sẽ lấy kích thước mặc định từ trình duyệt(thẻ html gốc 16px)
                -> thẻ con tiếp tục kế thừa từ thẻ cha

- rem: vd: 2rem: kích thước gấp 2 lần font chữ root element(ko kế thừa) -> size của thẻ html gốc (16px)
        -> đổi theo cỡ chữ cở trình duyệt
        -> dễ quản lí, chỉ cần thay đổi font-size thẻ html gốc còn lại tất cả giữ nguyên tỉ lệ
----> Quy đổi pixel sang rem 
        -> Thông thường 1 rem = 16px
        -> Cần đổi sang tỉ lệ 1 rem = 10px
        -> 10/16 * 100 = 62.5%
        -> Cần giảm font-size của html xuống 62.5% 

- CSS color:
        1. rgb :red  green   blue
           rgb(255,   0,      0)
           rgb(0,    255,      0)
           rgb(0,      0,     255)
           or rgb(255 0 0) : bỏ , = space
        
        2. RGBA(red  green  blue  alpha) //alpha: 0 | 1 : 0 là mờ nhất -> 1 là đậm nhất
        -> viết tắt phải thêm / trc alpha. vd rgb(255 0 255 /0.5)

        3. Hệ màu hex(hệ thập lục phân)
        -> #rrggbb: 2 kí tự đầu là red
                    2 kí tự giữa là green
                    2 kí tự cuối là blue
        -> giá trị mỗi kênh màu chạy từ 00 - FF (rgb chạy từ 0 -> 255)
        -> nếu kênh màu có 2 kí tự giống nhau thì rút gọn lại còn 1. vd #ff00ff = #f0f
        -> Vẫn có kênh alpha : 2 kí tự cuối chạy từ 00 -> ff. vd #00ffcccc

        4. Color name: vd deeppink

        5. CurrentColor -> dùng lại màu dg dùng

---> Màu xám ở ngoài cùng bên trái nên sẽ theo cặp giống nhau. vd: ccc, d3d3d3

- Các kiểu font chữ thường sử dụng trong lập trình web
        1. Sans serif: kiểu ko chân -> phần nội dung
        2. serif: có chân -> thường phần tiêu đề
        3. Monospace: cùng độ rộng, chiều ngang mọi chữ cái đều = nhau -> code
        -> Mỗi kiểu font(Font family) sẽ có những font name tương ứng (Font name là tên của nhóm họ font)

- System font: font chữ có sẵn trên hệ thống -> khi sử dụng System font có sẵn trên máy khách hàng để tối ưu hóa truy cập, đẩy nhanh tốc độ tải trang

- Css inheritance - kế thừa: Các phần tử con nhận được giá trị thuộc tính thừa kế từ phần tử cha
-> Các thuộc tính có kế thừa thường liên quan đến văn bản
        1. font-family
        2. font-size
        3. font-weight
        4. font-style
        5. color
        6. text-align
        7. line-height
        8. letter-spacing...

- preconnect: mở kết nối đến máy chủ để tải tài nguyên nhanh hơn

- font-weight: độ dày của chữ (thường từ 100 - 900)

- line-height: chiều cao dòng.vd line-height: 1.5/150%: khoảng cách dòng = 1.5 lần font-size
        -> có thể dùng line-height để căn giữa -> cho LH = height của thẻ

//Bài 51--------------------------------------------
- letter spacing: tăng giảm khoảng cách giữa các kí tự

- word spacing: tăng giảm khoảng cách giữa các từ

- text align: căn text
        1. = justify: căn dàn đều 2 bên
        2. = left: căn trái - mặc định
        3. = right: căn phải
        4. = center: căn giữa
---> chỉ căn text so với box chứa nó (thường là thẻ display = block)

//Bài 52------------------------------------------
- Text decoration: gạch chân
        1. = none: bỏ gạch chân
        2. = underline: thêm gạch chân
        3. = line-through: thêm gạch ngang từ
        4. = overline: gạch trên đầu
        5. = <underline> <kiểu dấu gạch> <màu sắc> <kích thước>: tự định dạng gạch chân
        6. kết hợp lại kiểu dc

- text indent: thụt lề

- text transform: đổi kiểu chữ
        1. = capitalize: viết hoa chữ cái đâù mỗi từ
        2. = lowercase: viết thường toàn bộ
        3. = uppercase: viết hoa toàn bộ

//Bài 53------------------------------------------   
- white space: quy định về khoảng trắng
        -> Ngoại trừ thẻ <pre> giữ nguyên định dạng code
        a. trong code có nhiều khoảng trắng     -> 1 khoảng trắng
        b. nhiều dấu xuống dòng                 -> 1 khoảng trắng
        c. nội dung quá dài, chạm tới lề        -> xuống dòng
--->Cách dùng
        1. = normal: trạng thái mặc định
        2. = nowrap: ko xuống dòng (kể cả chạm tới lề)
        3. = pre: giữ nguyên định dạng (giống thẻ pre)
        4. = pre-line: giữ nguyên định dạng theo line(enter);
                -> Tất cả dấu khoảng trắng thừa mỗi dòng trong nội dung văn bản sẽ bị loại bỏ
                -> Dòng mới (xuống dòng) được giữ nguyên
        5. = pre-wrap: giữ nguyên định dạng code
                -> Tất cả dấu cách thừa ở trong nội dung văn bản dc giữ nguyên
                -> dòng mới(xuống dòng) được giữ nguyên
                -> chạm tới lề -> tự động xuống dòng

- word break: Khi đoạn text or link dài, ng dùng nhập liền nhau(ko có khoảng trắng) thì có thể gây vỡ giao diện vì text ko bị xuống dòng
-> có thể dùng thuộc tính word break: break all để bẻ xuống dòng

//Bài 54------------------------------------------------
- text shadow: bóng đổ text
-> text-shadow: <horizontal> <vertical> <blur> <color>
        -> horizontal: trục nằm ngang(Ox)
                -> 10px: dịch bóng sang phải 10px
                -> -10px: dịch bóng sang trái 10px
        -> vertical:trục thẳng (Oy)
                -> 10px: dịch bóng xuống dưới 10px
                -> -10px: dịch bóng lên trên 10px
        -> blur: độ nhòe

- overflow: xử lí phần thừa văn bản
        1. visible(default): Thuộc tính mặc định hiển thị nội dung kể cả vượt box chứa
        2. hidden: ẩn nội dung khi nội dung vượt box chứa
        3. scroll: tạo thanh cuộn, luôn hiển thị vùng thanh cuốn
        4. auto: Nếu nội dung ngắn -> ko có scroll bar
                 Nếu nội dung dài, vượt box chứa -> tự động sinh scroll bar


//Bài 55-------------------------------------------

- overscroll-behavior:  Là 1 thuộc tính CSS dùng để điều chỉnh các trình duyệt xử lí sự kiện
"overscrolling" , tức là ng dùng cuộn trang đến khi ko còn nội dung nữa 
        1. overscroll-behavior: auto; -> lăn hết scroll con lăn lun scroll bự
        2. overscroll-behavior: contain; -> lăn trong giới hạn box , ko kéo theo box ngoài
        3. overscroll-behavior: none; -> lăn hết box thì trỏ chuột ra ngoài lăn tiếp, chỉ khác khi sử dụng mobile
---->Các giá trị khác
        /* Keyword values */
overscroll-behavior: auto; /* default */
overscroll-behavior: contain;
overscroll-behavior: none;

/* Two values */
overscroll-behavior: none auto;
overscroll-behavior: auto contain;

/* Global values */
overscroll-behavior: inherit; -> mặc định là auto
overscroll-behavior: initial; -> thông qua giá trị của cha
overscroll-behavior: revert;
overscroll-behavior: unset;

- custom - scrollbar: tùy biến thanh cuộn
--> 
/* width -> độ rộng của scrollbar */
::-webkit-scrollbar {
    width: 10px;
    /* border-radius: 5px; */
  }
  
  /* Track -> hộp màu xám chứa thanh cuộn*/
  ::-webkit-scrollbar-track {
    background: rgba(142, 168, 180, 0.589);
    border-radius: 5px;
  }
  
  /* Handle -> cái thanh sờ vào để kéo */
  ::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 5px;
  }
  
  /* Handle on hover -> cái hành động khi ta di chuột vào*/
  ::-webkit-scrollbar-thumb:hover {
    background: #2011a5cc;
  }

--> Nếu chỉ để dấu :: thì nó áp dụng cho tất cả thanh cuộn
        -> Muốn chỉ định thanh cuộn nào thì thêm tên class trc all dấu ::


//Bài 56--------------------------------------------

- text-overflow: tạo dấu ... khi nội dung dài
--->  Làm dấu ... ở dòng thứ 2, 3... -> bỏ đoạn code này vào
{
  -webkit-line-clamp: 2; //vượt quá 2 dòng thì hiển thị ...
  -webkit-box-orient: vertical;
  display: -webkit-box;

}

//Bài 57------------------------------------------------

- Font awesome: web thêm biểu tượng cho trang web

- list-style-type: none: để xóa dấu chấm trong trong thẻ li

//Bài 58------------------------------------------------

- background-color: 1. transparent: trong suốt
                    2. red: dùng tên màu
                    3. rgb()
                    4. #ff00ff
                    5. CurrentColor
--> Nền sẽ đổ vào toàn bộ các phần tính vào kích thước phần tử (border, padding, content)

//Bài 59-----------------------------------------------

- background image: thêm hình nền
--> Ở trạng thái mặc định, hình ảnh sẽ bị lặp vô hạn đến khi chiếm hết kích thước thẻ chứa nó
        -> none để loại bỏ ảnh nền

- background-repeat: 
        1. = repeat     -> BG lặp lại (mặc định)
        2. = no-repeat  -> BG ko lặp lại
        3. = repeat-x   -> BG lặp lại theo trục x (lặp theo chiều ngang)
        4. = repeat-y   -> BG lặp theo trục y(lặp theo chiều dọc) 

-->Lợi ích: có thể tạo ra nền đồng nhất từ 1 bức ảnh -> chiếm ít dung lượng

- Xếp nhiều hình ảnh : ảnh xếp trc nằm trên, ảnh xếp sau nằm dưới
        -> ảnh trên jpg thì sẽ che luôn ảnh sau -> nên để bg trong suốt để thấy ảnh sau(.png...)

//Bài 60----------------------------------------------

- background size: điều chỉnh kích thước của ảnh nền
        -> khi chưa set kích cỡ thì ảnh sẽ hiển thị tỉ lệ 1:1
        1. = contain: - ảnh vừa khung hình
                      - Giữ nguyên tỉ lệ ảnh
                      - ko bị mất ảnh
                      - nếu còn khoảng trống, ảnh sẽ bị lặp lại

        2. = cover:   - ảnh vừa khớp khung hình (kéo vừa khung)
        (giống canva) - giữ nguyên tỉ lệ ảnh(ko bị méo)
                      - có thể mất 1 phần ảnh bị thừa
                      - ko bị lặp ảnh
                
- background-size: 100px -> chiều rộng sẽ là 100px (1 đối số)
                   100px(%) 100px(%) -> chiều cao = chiều rộng = 100px(%) (có thể bị dãn/méo ảnh nếu thừa/thiếu 1 cạnh (%), or có thể bị lặp ảnh nếu thừa(px))


//Bài 61-----------------------------------------------

- background position: vị trí bắt đầu đặt ảnh nền
-->Các vị trí đặt ảnh nền
        top left        top         top right

        left            center       right

        bottom left     bottom       bottom right

--> sử dụng đơn vị % -> vượt thì lặp lại, no-repeat thì nền trắng

 0% 0% -------X----------->100% 0%
   |
   |
   |
   y
   |
   |
0% 100%                    100% 100%

--> sử dụng tọa độ cụ thể(px...)
0 0: gốc trên bên trái của box chứa

 0 0 -------X----------->
   |
   |
   |
   y
   |
   |
  
//Bài 62--------------------------------------------------

- linear gradient: tạo dải màu chuyển sắc
--> cú pháp:
        background-image: linear-gradient(direction, color-stop1, color-stop2)

        -> bắt buộc phải có ít nhất 2 màu(color)
        ->stop1, stop2 : % ko áp dụng chuyển sắc từng màu (từ 0 -> stop1(%) của box: trình duyệt sẽ giữ nguyên màu ban đầu, stop2: bắt đầu từ stop2 % thì ko chuyển màu -> tạo ranh giới)
        -> direction: top to bottom(default)
        to top left       to top(0 deg)         to top right (45)

        to left(-90 deg)                                 to right(90 deg)

        to bottom left     to bottom(180 deg)     to bottom right
- repeating-linear-gradient: để lặp dãy màu

//Bài 63--------------------------------------------------

- background attachment: 
        1. scroll (default): ảnh sẽ tự động cuộn theo trình duyệt khi kéo xuống
        2. fixed: ảnh cố định khi kéo scroll xuống (cái box di chuyển nhưng hình ảnh giữ nguyên)
        3. local: ảnh cố định cục bộ trong bố cục con (kéo nội dung ảnh sẽ cuốn theo)

//Bài 64--------------------------------------------------

- background clip: quy định vùng đổ nền
        1. border-box(default): Ảnh sẽ đổ full kích thước phần tử (content + padding + border) đổ từ border vào trong
        2. padding- box: ảnh chỉ đổ đến padding (đổ padđing vào trong)
        3. content-box: ảnh chỉ đổ phần content 

- background-clip: text: để đổ nền text: đổ màu nền phần text, ko hiển thị phần trống ngoài text
        -> -webkit-background-clip: text; để hổ trợ nhiều trình duyệt hơn

/* Kiểm tra xem trình duyệt có hỗ trợ thuộc tính này ko có thì thực hiện đoạn lệnh trong {}*/
/* @supports (background-clip: text) or (-webkit-background-clip: text) {
  .text_hightline {
    color: transparent;
    background-color: pink;
    background-image: linear-gradient(rgb(115, 222, 255), rgb(107, 235, 23));
    background-clip: text;
    -webkit-background-clip: text;
  }
} */


//Bài 65------------------------------------------------

- background origin: xác định bức ảnh đặt ở vị trí nào
        1. border-box: gốc 0, 0 của ảnh sẽ ở border
        2. padding-box: default - gốc ảnh mặc định ở phần padding
        3. content-box: gốc 0, 0 của ảnh sẽ ở phần content

//Bài 66------------------------------------------------

-->Cú pháp viết tắt của background
background: bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment
vd: background: red url(./bg/1.PNG) left/contain no-repeat padding-box border-box fixed;

//Bài 67-------------------------------------------------

- backdrop filter: bộ lọc phông nền -> ứng dụng các hiệu ứng đồ họa cho vùng phía sau
        1. blur: độ nhòe
        2. invert: đảo ngc Màu
        3. sepia: chuyển màu cổ điển
        4. brightness: sáng tối
        5. contrast: tương phản
        6. drop-shadow: đổ bóng
        7. grayscale: chế độ màu xám
        8. hue-rotate: thay đổi ram Màu
        9. saturate:  độ bão hòa

-->ví dụ nhiều bộ lọc

backdrop-filter: url(filters.svg#filter) blur(4px) saturate(150%);

//Bài 68---------------------------------------------------

-Clip path: tạo ra 1 vùng cắt, nội dung bên trong vùng cắt sẽ dc hiển thị, nội dung bên ngoài vùng cắt sẽ bị ẩn đi (avt)
        1. circle(<bán kính hình tròn px/%>): hình tròn
                -> vd: 50% = 50% * max(width, height);
                -> dịch tâm đường tròn theo x, y. vd: circle(40%(R) at 40%(x) 50%(y)) -> mặc định x = 50% và y = 50%
        2. inset(): hình chữ nhật
                a. Một đối số: đều 4 cạnh
                b. 2 đối số: trên-dưới / trái-phải
                c. 3 đối số: trên / trái - phải / dưới
                d. 4 đối số: theo chiều kim đồng hồ
                e. thêm bo góc khai báo sau Keyword: round (cũng dc 4 đối số cut theo góc như border-radius)
        3. polygon(): cắt hình đa giác
                ->Cú pháp chung: cặp x,y là các cặp tọa độ các góc theo x,y
                -> clip-path: polygon(x y, x y, x y);
                -> vd: clip-path: polygon(0 0, 100% 0%, 100% 100%, 30% 100%);


--> 
 0% 0% -------X----------->100% 0%
   |                        |
   |                        |   
   |                        |
   y           (ẢNH)        |   
   |                        |
   |                        |
0% 100% -------------------- 100% 100%

//Bài 69-----------------------------------------

- box shadow: đổ bóng cho box

- có 2 giá trị bắt buộc: offset-x | offset-y
        -> thêm ở sau là blur | spread radius| ..| color

- thêm bóng đổ vào trong box: chèn Keyword : inset

- đổ nhiều bóng: ngăn cách bởi dấu ,
-> vd:     box-shadow: 160px 0px red, 0 160px green, 160px 160px yellow;

//Bài 70-------------------------------------------

- point event: sử dụng để kiểm soát hoạt động của chuột trên các phần tử HTML
-> mặc định là auto
-> point event = none: ko thể lấy link ảnh...(ko chuột phải dc), ko tương tác dc

//Bài 71------------------------------------------

- co dãn ảnh khi cho dãn web

- Mẹo căn giữa thẻ chứa nó
    display: block;
    margin: 0 auto;

- lazy load: sử dụng để tối ưu trang web khi nội dung trang web dài, việc load toàn bộ hình ảnh ngay khi truy cập là ko cần thiết
-> giúp hỗ trợ chỉ tải ảnh khi người dùng cuộn gần đến phần nội dung hình Ảnh
        -> mặc định sẽ tải tất cả hình ảnh ngay từ khi truy cập

--> thêm loading = "lazy" thẻ img -> ảnh sẽ chưa load khi ng dùng chưa di chuyển đến gần ảnh
        ->  <img src="./bg/bg1.jpg" alt="cat" class="demo" loading="lazy"/>

//Bài 72-----------------------------------------

- pseudo element: Một phần tử giả CSS được sử dụng để tạo kiểu cho các phần được chỉ định của một phần tử.

- Ví dụ, nó có thể được sử dụng để:
        -> Tạo kiểu cho chữ cái hoặc dòng đầu tiên của một phần tử
        -> Chèn nội dung trước hoặc sau nội dung của một phần tử

- ::first-line: vd: p:: first-line: chọn dòng đầu tiên các thẻ p
        -> ko áp dụng vs thẻ display = inline, chỉ áp dụng vs thẻ block và inline-block
        -> các thuộc tính dùng dc first-line:
                font properties
                color properties
                background properties
                word-spacing
                letter-spacing
                text-decoration
                vertical-align
                text-transform
                line-height
                clear

- ::first-letter: vd p::first-letter: chọn chữ cái đầu tiên các thẻ p
        -> các thuộc tính áp dụng dc first-letter
                font properties
                color properties 
                background properties
                margin properties
                padding properties
                border properties
                text-decoration
                vertical-align (only if "float" is "none")
                text-transform
                line-height
                float
                clear

- ::selection: vd: p::selection: chọn phần tử vùng đang đc bôi đen các thẻ p

- ::marker: vd: li::marker: chọn các điểm đánh dấu của các phần từ li 

- :: before: vd: p::before: thêm phần tử vào đằng trc thẻ p

- ::after: vd: p::after: thêm phần tử vào đằng sau thẻ p

//Bài 73-------------------------------------------

- css counter: tạo bộ đếm tự động
--> các bước thực hiện
        1. tạo biến đếm, reset = 0
        -> counter-reset: section;
                -> section: tên biến đếm
        2. tăng biến đếm lên 1 khi gặp thẻ nào thì viết trong thẻ đó, tương tự cho counter-reset
        -> counter-increment: section;
        3. dùng pseudo element
        -> vd thêm trc thẻ h2
                -> h2::before{
                        content: "Phần" counter(section) ": ";
                        /* counter(section) :giá trị biến đếm */
                }

//Bài 74---------------------------------------------

- hàm calc(): cho phép thực hiện các phép tính đơn giản: + - * /
-> có thể sử dụng vs tất cả thuộc tính CSS về kích thước như width, height, margin, padding, top, left, background-position...

- Chú ý: 
        -> Sau calc ko dc có khoảng trắng
        -> khi dùng vs toán tủ + - thì bắt buộc phải có khoảng trắng trc và sau toán tử + - 
        -> toán tử * /
                -> * : viết đơn vị trc hay sau đều dc. vd calc(100px * 2/ 2 * 100px)
                -> / : phần có đơn vị bắt buộc viết trc, ko chia cho 0. vd: calc(100px / 2)


//Bài 75---------------------------------------------

- Biến: khi 1 giá trị dùng đi dùng lại nhiều lần, ta có thể gán biến cho nó để tái sử dụng
-> Cú pháp khai báo: --<tên biến>_<thuộc tính lặp lại>: <giá trị>
        -> vd: --box-height: 100px;


--> Cú pháp gọi: var(tên biến)

-> khai báo trong thẻ root or html thì có thể sd cho toàn trang

-> khai báo trong phần tử nào thì sẽ áp dụng dc cho phần tử đó và các cấp thấp hơn(con của nó)

-> có thể bị ghi đè theo thứ tự ưu tiên (viết sau ghi đè lên viết trc)

-> giá trị backup của biến ->dự phòng khi ko tìm dc giá trị của Biến
        -> vd:     background-color: var(--background-box, purple);

//Bài 76------------------------------------------------

- Thuộc tính Position cho phép điều chỉnh vị trí các phần tử trên trang web

- Position: Static -> mặc định của position
        -> Các phần tử HTML mà chúng ta đã bt có vị trí cố định trên trang web khi chưa can thiếp = CSS

- Position: relative -> định vị so vs vị trí ban đầu 1 khoảng X
        -> left: (các lề TRÁI ban đầu 1 khoảng x)
        -> right: (các lề PHẢI ban đầu 1 khoảng x)
        -> top: (các lề TRÊN ban đầu 1 khoảng x)
        -> bottom: (các lề DƯỚI ban đầu 1 khoảng x)
---> Tuy nhiên ko có bất kì ko gian nào dc tạo ra để chứa phần tử dc định vị theo kiểu này
vì vậy các phần tử khác trong web vẫn có thể bị che khuất bởi phần tử dc định vị theo kiểu relative

//Bài 77------------------------------------------------

- Position: absolute: -> phần tử thực sự dc đưa ra khỏi luồng ban đầu
        -> Nếu ko có tổ tiên có position:relative thì phần tử dc định vị theo top left corner webpage
        -> phần tử dc định vị theo tổ tiên gần nhất đặt position:relative -> lấy gốc theo cha nó

--> Con (absolute) tìm cha (relative), tìm ko ra thì mô côi (webpage), con có cha thì theo cha, con vừa có cha vừa có ông nội thì con bám theo cha

//Bài 78------------------------------------------------

-Ứng dụng position absolute và relative

//Bài 79------------------------------------------------

- position:fixed -> fix cứng phần tử theo viewport (vùng hiển thị nội dung trên màn hình của trình duyệt)

//Bài 80------------------------------------------------

- z-index: Dùng để xác định xem phần tử nào cao hơn phần tử nào . Phần tử thấp hơn có thể bị che khuất

-> khi phần tử có cùng kiểu vị trí(position) dc định nghĩa là relative, absolute or fixed
-> các phần tử Static ko bị ảnh hưởng bởi z-index
-> Ở trạng thái mặc định, chưa set z-index thì phần tử nào viết sau sẽ nằm trên
-> z-index càng bự thì càng cao

//Bài 81--------------------------------------------------

- position:sticky -> tạo hiệu ứng bám dính cho phần tử khi thẻ cha gần nhất có thanh cuộn trang web
--> định vị phần tử dính lại theo thẻ cha gần nhất có thanh cuộn scroll bar

//Bài 82---------------------------------------------------

- page layout: còn gọi là bố cục - dàn trang cơ bản là cách ta xếp đặt khối bố cục con (component layout) lên trên webpage
        -> việc xếp đặt giúp cho trang web nhìn đẹp mắt và thu hút ng xem, và truyền tải nội dung 1 cách trật tự, logic

- component layout: là các bố cục con, nơi mà text, images, video, và các nội dung khác dc xếp đặt

- 3 cách phổ biến xây dựng layout vs CSS
        1. float layout:giống layout báo, giúp dàn trang theo chìu ngang, hoặc chữ bao quanh ảnh
                -> cách dùng: float: right/left
                -> khi sử dụng thuộc tính float:left, image sẽ bị trôi khỏi luồng bth, các phần tử còn lại sẽ bao quanh phần tử image
                -> trong trg hợp, mún 1 phần tử nào đó ko bị chèn ép để bao quanh hình. ta cần sử dụng
                        -> clear: left -> clear giá trị float bên trái
                        -> clear: right -> clear bên PHẢI
                        -> clear: both -> clear cả 2 hướng (footer)
                --> ít dc sd
        2. flexbox
        3. css grid

//Bài 83-----------------------------------------------

- flexbox: sẽ đưa phần tử ra khỏi luồng thông thường và sắp xếp theo 1 quy tắc riêng
-> display:flex
-> 2 trục chính
        1. main axis: trục ngang
        2. cross axix: trục dọc

-> có 2 nhóm
        1. flex-container: code trực tiếp vào class cha
        2. flex-items: code trực tiếp cho item con

--->Chú ý:
        - start, end: là lun theo trục mặc định ko đổi chiều dù đổi trục
        - flex-start, end: đổi chiều theo chiều của trục
//Bài 84-----------------------------------------------

-justify-content:  ăn theo trục main
-> mặc định trục main axis sẽ nằm ngang, trục cross axis sẽ nằm dọc
-> justify content sẽ căn các phần tử theo trục main axis 
        -> main start: điểm bắt đầu (thường bên trái)
        -> main end: điểm kết thúc (thường bên phải)
        -> center: giữa
-->Cách dùng:
        1. = flex-start: phần tử bắt đầu từ bên trái(default)
        2. = flex-end: phần tử bắt đầu từ bên PHẢI
        3. = center: phần tử nằm ở giữa
        4. = space-between: cách đều nhau, sát lề
        5. = space-around: khoảng trắng xung quanh mỗi phần tử là bằng nhau (khoảng trống giữa 2 block x2)
        6. = space-evenly: cách đều nhau, cách cả lề

//Bài 85-----------------------------------------------

-align-items: định vị trí item theo trục cross(dọc) - dùng cho 1 hàng -> ăn theo trục cross
->align-item:stretch: - mặc định kéo dãn các phần tử container theo trục cross -> cho tất cả phần tử dãn vừa box chứa container

--> Cách dùng:
        1. = flex-start: tất cả item dồn lên trên (cross start)
        2. = flex-end: tất cả item dồn xuống dưới (cross end)
        3. = center: all item vào giữa box chứa
        4. = baseline: căn theo chân phần tử

//Bài 86-----------------------------------------------

-flex-wrap: 
        1. nowrap: mặc định -> ko xuống HÀNG
        2. wrap: xuống hàng
        3. wrap-reverse: xuống hàng + đảo ngược

- align-content: áp dụng từ 2 hàng trở lên
        1. = flex-start: căn theo cross start
        2. = flex-end: căn theo cross end
        3. = stretch: default -> căn đều theo trục cross và lắp đầy container
        4. = center: căn giữa theo trục cross
        5. = space-around: khoảng trắng xung quanh các hàng là đều nhau, cách lề (khoảng cách 2 hàng = x2 khoảng cách hàng ra lề)
        6. = space-between: các hàng là đều nhau, sát lề
        7. = space-evenly: khoảng cách các hàng đều nhau, cách lề

//Bài 87-------------------------------------------------

-flex-direction:  row | row-reverse
 -> xoay hướng trục main axis cross axis ko đổi 
        -> đổi hướng start --> end thành end <--- start
-->Cách dùng
        1. = row: default:
        2. = row-reverse: đổi chiều trục main

- flex-direction: columns | column-reverse
-->columns:  trục main đổi thành trục dọc chiều từ trên xuống
        -> trục cross thành trục ngang chiều từ trái qua phải
--> columns-reverse: trục main thành trục dọc chiều từ dưới lên
        -> trục cross thành trục ngang chiều từ trái qua phải

- flex-flow: cú pháp viết tắt của flex wrap và flex direction

//Bài 89---------------------------------------------------------

- align-self: giống align- items nhưng chỉ tác động lên 1 box duy nhất
        1. = flex-start:
        2. = flex-end:
        3. = center:
        4. = baseline:
        5. = stretch:

- flex-grow: chia tỉ lệ theo trọng số các khối trong container
        1. = 0: mặc định 
        2. = 1
        ...

//Bài 90-------------------------------------------------

- flex-shrink: xác định khả năng bị co lại của item nếu cần(vd. ko mún bị mất chữ...)
        -> thích nghi vs ko gian hạn chế
        = 0 : ko bị co lại
        = 1: default: co lại vừa box chứa
        = 2: co lại 2 lần
        ...

- flex-basis: set main size item (lưu ý main size theo trục main kể cả khi xoay trục)
        
//Bài 91--------------------------------------------------

- flex: là cú pháp viết tắt của 
        1. flex-grow: chia tỉ lệ
        2. flex-shrink: co lại
        3. flex-basis: set tỉ lệ theo trục main

- thứ tự ưu tiên kích thước item (tăng từ 1 -> 4)
        1. content width (ưu tiên thấp nhất)
        2. width
        3. flex-basis
        4. min-width/max-width (ưu tiên cao nhất)
                -> max-width: = chiều dài nội dung bên trong -> dừng lại ko co nx
                -> min-width = kích thước từ dài nhất -> độ rộng tối thiểu -> ko co lại ko kéo nhỏ trình duyệt
        -> chú ý:
                -> nếu max-width < flex-basic -> max-width
                -> nếu max-width > flex-basic -> flex-basic

- order: thay đổi thứ tự item
        = 0: mặc định 
        -> giá trị càng cao thì nằm ở ngoài cùng

//Bài 92---------------------------------------------------

- dùng margin - <chiều> : auto để kéo phần tử 2 đầu container

- margin = auto -> căn con chính giữa box cha

//Bài Figma to HTML

- Bố cục của 1 trang web
        1. header
        2. body (navigation bar...)
        3. footer
        
//Tạo web --------------------------------------------------

- Tạo file index.html

- tạo thư mục assets/css/style.css
        -> trong thư mục assets tạo thêm thư mục img đồng cấp thư mục css
        -> tạo file reset.css đồng cấp style.css

- link đến file reset, style

- Tạo base của dự án: 
        
        * {
        box-sizing: border-box;
        }

        html {
        font-size: 62.5%;
        }

        /* Khôi phục cỡ chữ lại thành mặc định theo rem */
        body{
        font-size: 1.6rem;
        }

- kiểm tra toàn bộ font chữ của dự án 
        -> font tiêu đề (font 700...)
        -> font nội dung văn bản (font 400 500 600 700..)

- lên gg font lấy font

- nhúng font vào header, paste tên font dô phần body bên style

- phân tích header

- tạo header
        -> tạo thẻ header có class header và class fixed để dùng sticky neo header lại
        -> trong <header> tạo class main-content để tái sử dụng độ rộng phần tử or các phần
        -> tạo class body để bọc các phần trong header sau đó  xoay ngang lại
        -> có button thì tạo class btn để tái sử dụng nút bấm, từng nút sẽ có class riêng
        -> có ảnh thì lấy ảnh dạng svg để ko vỡ khi zoom
        -> thêm style h100000 cho body để dãn ra dễ code
        -> tạo nhóm common dùng chung cho tất cả các phần tử
        -> code cho từng thẻ để căn phần tử
        -> code cho main-content để xác định độ rộng trang web
        -> còn lỗi khi thu nhỏ trang web thì phần tử sát lề -> dùng hàm calc
        -> copy thuộc tính của nav -> bỏ thuộc tính dư thừa: font-family, font-style, font-weight, line-height(vì ko có có 2 dòng liền kề), text-align: center-> vì thẻ a là thẻ inline nên ko cần center
        -> thêm padding dô nav để khi ng dùng di chuột gần đến thì đã click dc r -> vùng bấm to hơn và cx tách các nút ra
        -> thêm hiệu ứng khi di chọn vào btn trong nav, thay font-weight = text-shadow để ko bị giật text xung quanh khi trỏ vào
        -> thêm class active vào thẻ li để tạo hiệu ứng
        -> thêm display: block cho thẻ after
        -> dùng positon absolute để căn dấu gạch chân theo thẻ a
        -> tạo nút làm tương tự như trên, chuyển thành thẻ inline-block để thêm padding (display -> padding -> line-height -> min-width)
        -> căn giữa body = align-items
        -> thêm padding cho body để cách top
        -> thêm sticky cho header

- phần hero: phần nổi bật của trang web (ngay đầu trang web)

- ảnh thì lưu jpg, logo, icon thì svg

- ảnh nổi trên ảnh -> dùng absolute để canh chỉnh

- phân tích từ tổng quan đến chi tiết, từ bên ngoài đến bên trong, khối nào bọc phần nào

- nút chuyển tab nên dùng thẻ a, nút bấm để bật video... dùng thẻ button

- margin ko  đổ dc nền, padding đổ dc

- object-fit: cover để ko vỡ ảnh

- nên căn cho khối nhỏ phần bottom để khi thêm item nó sẽ nhảy lên trên

- nên đặt tên biến cho tên font, color dùng nhiều

- xem thẻ nằm trong khối nào và tên class gì

- code phần popular, vẫn dùng class main-content để dùng lại kích thước trang

- vào thẳng svg để lấy code ảnh sau đó paste thay thế thẻ img

-ng dùng di chuột vào đổi màu dùng hover

- thêm hình bàn tay khi di chuột vào dùng cursor: pointer

- gom nhóm thiết kế tối ưu nhất

- kích vào ảnh/tên để chuyển tab -> bọc thẻ img = thẻ a

- tối ưu popular: tránh việc nhập nội dung dài vỡ giao diện
        -> đặt flex = 1: chia đều các khối
        -> nội dung dài dùng ...
        -> thêm vào common đoạn code sau tạo 1 dòng là ...
        .line-clamp{
        display: -webkit-box;
        -webkit-line-clamp: var(--line-clamp, 1);
        -webkit-box-orient: vertical;
        overflow: hidden;
        }
        -> quá 2 dòng r ...
        .line-clamp.line-2 {
        --line-clamp: 2;
        }

        -> nhập link có từ quá dài, thêm class sau vào thẻ có nguy cơ bị vỡ UI
        .break-all {
        word-break: break-all;
        }

- thẻ blockquote: phù hợp dành trích dẫn 1 câu nói

- các phần tử trong 1 container cách nhau dùng gap

- thằng nào active gòi thì cursor = default

- để nhảy ra ngoài 1 cấp dùng ^

- chuyển nội dung ra giữa trục dọc 
        display: flex;
        flex-direction: column;
        justify-content: center;

- hoặc align-content =center

- ::before: dc xem như 1 thẻ con của thẻ container -> tác động dc df

- muốn gạch chân mà dài theo chữ thì dùng display:inline-block cho thẻ cha, thẻ con ko set chiều dài cố định

- gạch dưới chữ ko có border-radius thì dùng border vẽ là dc, còn có border-radius thì dùng before, after

- thẻ inline thì ko margin top, bottom dc

//GRID CSS--------------------------------------------------------------------

- grid CSS
        -> là 1 phương pháp sắp xếp và cấu trúc trang web dựa trên lưới
        -> cho phép chia trang thành các ô hình và điều khiển vị trí các phần tử trên trang

- grid có:
        - grid line: các đường kẻ
        - grid cell: là có ô vuông 
        - grid track: là các ô theo chiều ngang(row) theo chiều dọc(column)
        - grid area: tập hợp nhiều grid cell hình chữ nhật

- flexbox: 1 CHIỀU (ngang /dọc) -> có sẽ bị xê dịch

- grid: 2 chiều -> co nhỏ thì sẽ ngay hàng thẳng lối
        -> kết hợp cả 2

- cách sử dụng grid: 
        -> đặt tất cả phần tử con vào class bên ngoài (container)
        -> khi đặt class cha là grid or inline-grid thì tất cả phần tử rời khỏi luồng thông thường và tuân theo quy tắt lưới của grid
        -> giống thẻ block
        -> mặc định 1 hàng và 1 cột 
        -> grid-template-columns/row
                > grid-template-columns: auto;
                  grid-template-rows: auto;
                -> ko xét thì chiều cao/rộng sẽ vừa với nội dung bên trong 
        -> chia cột thì nhập độ rộng từng cột vào
        -> dùng dc độ dài tuyệt đối, %, em, rem, calc()...

- gap: là khoản hở giữa các dòng và CỘT
        -> grid-row-gap: khoảng hở các Dòng
        -> grid-column-gap: khoảng hở các cột
        -> viết gọn: gap: row-gap columns-gap. vd:gap: 5px 10px
                -> nhập 1 đối số để áp dụng cho cả dòng và cột

- repeat(): dùng trong trường hợp có nhiều giá trị lặp lại
        -> repeat(<số lần lặp>, <giá trị lặp>)

- fr: chia hàng và cột theo trọng số
        -> vd grid-template-row: 1fr 2fr;

- dùng auto để chia cột 
        -> ko áp dụng auto cho chia dòng

- sử dụng minmax(): giới hạn kích thước phần từ nằm trong dải nào đó để ko lm vỡ giao diện
        ->grid-template-row: minmax(50px, 100px): dãn tối đa 100px, co tối đa đến 50px

- grid-auto-row: chỉ định chiều cao dòng mặc định
        -> tất cả những row ko chỉ định rõ chiều cao sẽ tuân theo chiều cao mặc định row này 

- định vị phần tử với giá trị tương đương = grid line
        /* bắt đầu từ dòng 1 -> 3 */
                grid-row-start: 1;
                grid-row-end: 3; or grid-row-end: -2;
        -> chỉ số âm để thuận tiện trong việc thêm item mà vẫn đảm bảo item bọc đến đâu
        /* đầu từ cột 2 -> 4 */
                grid-column-start: 2;
                grid-column-end: 4;

- viết tắt
        -> grid-row viết tắt của grid-row-start và grid-row-end
                - vd: grid-row: 1 / 2
        
        -> grid-column viết tắt của grid-column-start và grid-column-end
                - vd: grid-column: 2 / 4
        
        -> nếu 1 giá trị dc cung cấp, nó sẽ chỉ định  grid-row-start/grid-column-start

        -> trc sau / có thể có space or ko

        -> grid-area: row-start / column-start / row-end / column-end
                - vd: grid-area: 1 / 2 / 2 / 4

- span: để mở rộng thêm bao nhiêu ô từ vị trí hiện tại
        - vd: span 2: mở rộng thêm 2 ô từ vị trí hiện tại

- grid-template-areas: chia grid theo tên
                .container {
                display: grid;
                gap: 5px 10px;
                grid-template-areas: 
                "header header header"
                "menu content sidebar"
                "menu footer footer"
                ;
                }

                .box1{
                grid-area: header;
                }

                .box2{
                grid-area: menu;
                }

                .box3{
                grid-area: content;
                }

                .box4{
                grid-area: sidebar;
                }

                .box5{
                grid-area: footer;
                }

- align-item: căn chỉnh nội dung bên trong phần tử con theo trục dọc (trục cột) so vói cái cell
        -> stretch: default
        -> center: thu bg = nội dung bên trong và đặt giữa cột
        -> start: thu bg đi về đầu cột
        -> end: thu bg đi về cuối cột

- justify-item: căn chỉnh nội dung bên trong phần tử con theo trục ngang (trục hàng) so vói cái cell
        -> stretch: default
        -> center: thu bg = nội dung bên trong và đặt giữa hàng
        -> start: thu bg đi về đầu hàng (chiều ngôn ngữ)
        -> end: thu bg đi về cuối hàng
        -> left: thu bg đi về TRÁI
        -> right: thu bg đi về phải

- align-content: căn các item trong khối container theo trục column so với nguyên khối grid của khối cha
        -> lưu ý: thẻ display:grid có tính chất giống thẻ block có chiều cao vừa = nội dung mà nó chưa, chiều dài kéo dãn tới cuối dòng
        -> start: default: nằm trên cùng
        -> end: cả khối item dịch xuống cuối
        -> space-aroung: khoảng cách các dòng = 2*cách lề
        -> space-between: = nhau sát lề
        -> space - evenly: = nhau cách lề

- justify-content: căn chỉnh các item trong khối container theo trục row so với nguyên khối cha
        -> start: default: nằm trên cùng
        -> end: cả khối item dịch xuống cuối dòng
        -> space-aroung: khoảng cách các cột = 2*cách lề
        -> space-between: = nhau sát lề
        -> space - evenly: = nhau cách lề

- grid-auto-flow: chỉ định hướng của grid
        -> mặc định là hướng row: thêm item thì sẽ thêm theo hướng row hết column thì xuống row khách
                - vd: 12345
                       678
        -> = column: thêm item tới hết row xong sẽ nhảy qua column khác
                - vd: 135
                      24
                
- auto-fill, auto-fit: dùng để xác định cách grid items (phần tử bên trong grid) đc tự động xếp trong grid container khi ko có đủ vị trí (dc xác định trc) khi co/phóng trình duyệt
        -> auto-fill: tự động thêm các ô trống ở cuối nếu trình duyệt có đủ chổ, co lại thì các ô trống này nhỏ lại
                ->   grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        -> auto-fit: khi màn hình đủ lớn, sẽ tự động lắp đầy

//--BEM----------------------------------------------------------

- BEM: viết tắt của block, element, modifier là 1 pp đặt tên và quản lí CSS

        -> block: các khối độc lập
                -vd: header, navigation, menu, footer...

        -> element: có thể coi element là phần tử con của block, element dc gắn về mặt ngữ nghĩa vs block của nó
                -vd: title, description, image...
                - cách đặt tên: block__element: header__title, card__image...

        -> modifier: là thành phần dùng để bổ sung nghĩa cho block or element
                -vd: checked, disabled, small, red, signIn, signUp...
                - cách đặt tên: 
                        + block__element--modifier: header__title--primary, block--
                        + block--modifier: modal--custom, modal-fullscreen...

        -> nếu tên có từ 2 từ trở lên thì dùng -
                -vd: card-list__button

- BEM ko có mục đích phản ảnh cấu trúc lồng nhau của các block, các element
        - giả sử: 1 blocks chứa element 1, element1 chứa element 2, element 2 chứa element 3
        - ko đặt block__ele1__ele2 mà chỉ cần block_ele2

//----------------------------------------------------------------

- thẻ có ngữ nghĩa: 
        -> giúp trình đọc máy, trình phân tich website hiểu dc cấu trúc trang web
        -> giúp tối ưu hóa cho công cụ tìm khiếm
        -> tạo cấu trúc mạch lạc, dễ đọc đối với cả lập trình viên

- Một số thẻ có ngữ nghĩa
        1. <header>: phần đầu trang web, or 1 vùng chứa nội dung giới thiệu
        2. <nav>: đánh dấu phần chứa menu điều hướng or link đến các trang con trong trang web
        3. <main>: chỉ ra nội dung 9 của trang web, thường nội dung 9 của trang
        4. <footer>: phần chân trang, thường chứa nội dung bản quyền, liên hệ, các liên kết khác...
        5. <figure>:  Dùng để bọc hình ảnh, biểu đồ, video… khi chúng bổ nghĩa cho thành phần nội dung.
        6. <figcaption>: dung để mô tả cho phần tử figure
        7. <mark>: Làm nổi bật (highlight) một phần của văn bản.
        8. <aside>: Các thông tin bên lề: Ví dụ: Quảng cáo, sản phẩm liên quan…
        9. <article>: Chỉ định nội dung độc lập, khép kín: Bài đăng, thẻ sản phẩm. Đầy đủ nội dung 
        10. <section>: Được sử dụng để chia nội dung trang thành các phần khác nhau. Phần nhỏ trong nội dung
        11. <time>: chỉ giờ
        12. <summary>: tóm tắt phần tử trong thẻ <detail>

//Project-3-----------------------------------------------------

- add favicon: 
        -> tải ảnh png-
        -> đưa ảnh vào link tạo favicon
        -> tải zip, bỏ vào folder favicon, giải nén
        -> lấy link html bỏ vào header
        -> sửa link href ./assets/favicon
        -> vào manifest.json -> chọn src (ctrl shift A L) -> thêm /assets/favicon/ sau "

- tạo header, tạo class container để tái sử dụng chiều rộng cho các phần

- để co nhỏ trình duyệt header ko bị sát lề thì dùng max-width: calc(100% - 48px)

- khi active nếu chữ to lên làm kích thước bị giật thì thay = text-shadow

- dùng thẻ section để bọc phần hero lại vì nó là thông tin nổi bật

- section or article thì cần có tiêu đề nhưng article có thể bê đi bất cứ đâu dc, còn section chỉ bổ nghĩa

- 2 thẻ kế nhau có khoảng cách nho nhỏ -> tác động vào thẻ cha df

- flex = 1 để chiếm hết khoảng ko gian còn lại

- để dồn ảnh qua phải dùng jc:flex-end

- để ảnh lớn chông lên ảnh nhỏ dùng mright, z-index để đổi vị trí ảnh lớn sau ảnh nhỏ 

- tạo thẻ main, code từng phần, dùng class container trong từng phần để tái sử dụng kích thước 1170px

- khi giới hạn độ rộng thì thẻ block ko còn nằm giữa trình duyệt nx nên sẽ phải thêm margin:0 auto;

- ko giới hạn chiều cao của thẻ cái răng để thêm nội dung thì nó sẽ dãn ra

- position:relative : lôi item ra khỏi luồng thông thường, khi hover vào nó sẽ ko bị dính vào item khác

-sửa fill thành CurrentColor

- .service-item:hover .service-item__icon: khi hover vào item thì tác động vào icon

- transition: để điều chỉnh thời gian chuyển đổi

- bật grid trên figma mà thấy item nằm gọn trong các grid thì nên dùng grid

- border-color: đổi màu border

- để item dịch lên dịch xuống dùng   transform: translateY(-16px);

- có nội dung thì bọc = thẻ section

- nếu 2 khối sát quá thì vừa margin vừa padding

- xóa phần thừa xuống dưới của ảnh khi thẻ inline chừa cho các chữ có đuôi dài dùng display: flex

- có thể dùng css để lm bg cho ảnh

- ảnh nhỏ thì có thể 2x cho nét

- ảnh max-width 100% tự động căn tỉ lệ

- xoay chiều 180 độ dùng rotate: 180deg;

- để kéo gạch chân gạch qua chân chữ có đuôi dùng : text-underline-offset: 5px;

- giới hạn chiều cao của thẻ figure và overflow hidden để khi tranform ảnh bự lên thì ko bị đè lên nội dung

- những thẻ sau sẽ ko ăn theo font của thẻ cha mà ăn theo trình duyệt vì thế phải kế thừa chúng ở phần common
        input, textarea, select, button{
        font-family: inherit;
        font-size: inherit;
        }

//Responsive web design--------------------------------------------

- Responsive web des: thiết kế web linh hoạt: dùng chung source, tùy vào size screen thì sẽ cho viewport khác nhau
- adaptive web des: thiết kế web thích ứng: mỗi size screen có source khác nhau
- Ngày nay có rất nhiều size màn hình khác nhau         
        -> yêu cầu trang web hiển thị trên tất cả chúng 
        -> việc tạo ra trang web có khả năng phản hồi (Responsive) ko chỉ là xu hướng mà còn là yêu cầu

        ---> Responsive giúp trình duyệt hiển thị theo viewport của khách hàng như điện thoại/ máy tính...

- So sánh: 
1. Khái Niệm (Concept)
      -  Responsive Web Design (RWD): Dựa trên kích thước màn hình, linh hoạt thay đổi chi tiết để phù hợp với từng kích cỡ màn hình khác nhau.
      -  Adaptive Web Design (AWD): Tập trung vào việc tối ưu hóa thông tin hiển thị cho từng loại thiết bị cụ thể và chú trọng vào biểu mẫu sẽ xuất hiện như thế nào trên từng thiết bị đó.
2. Phương Pháp (Method)
      -  RWD: Sử dụng Media Queries để thiết lập các điểm ngắt để bố cục có thể thay đổi.
      -  AWD: Làm riêng từng bản bố cục cho các loại thiết bị khác nhau và áp dụng.
3. Bố Cục (Layout)
      -  RWD: Một bố cục chung cho mọi thiết bị.
      -  AWD: Làm riêng từng bố cục cho từng thiết bị.
4. Tải Trang (Resources)
      -  RWD: Tài nguyên web nặng, ảnh hưởng tới tốc độ tải trang.
      -  AWD: Chỉ gửi nội dung cần thiết cho thiết bị đó để giảm tải.
5. Hiệu Suất Trang Web (Web Page Performance)
      -  RWD: Hiệu suất có thể giảm khi phải xử lý nhiều nội dung không cần thiết.
      -  AWD: Giảm tải trang có thể cải thiện hiệu suất.
6. Quản Lý Nội Dung (Content Management)
      -  RWD: Dễ dàng quản lý vì chỉ có một phiên bản nội dung.
      -  AWD: Cần quản lý nhiều phiên bản của trang web, mất nhiều thời gian và chi phí.
7. Thời Gian Phát Triển (Development Time)
      -  Responsive Web Design (RWD): Thời gian phát triển nhanh hơn do sử dụng một bộ mã nguồn cho tất cả các thiết bị.
      -  Adaptive Web Design (AWD): Thời gian phát triển lâu hơn do phải tạo nhiều bộ mã nguồn riêng cho từng thiết bị. Khi cập nhật, cũng phải cập nhật các bộ mã riêng cho từng thiết bị.

//Media query-------------------------------------------------------

- media query: thg dùng để tùy chỉnh css vs các break point dc chỉ định
- khi thỏa mãn điều kiện css trong khối @media sẽ dc thực thi và ghi đè css mặc định vốn có

- cú pháp :
        @media (điều kiện)
        {
                khối lệnh thực thi khi điều kiện đúng
        }

- /* max-width: với chiều rộng tối đa là bnhiu thì áp dụng (từ đó trở xuống) e này */
- /* min-width: tối thiểu bnhiu thì áp dụng từ đó trở lên */
- điều kiện kết hợp dùng and: ví dụ min 600 max 1000 thì đoạn từ 600 đến 1000 sẽ áp dụng
- điều kiện , : lấy cả 2 đoạn

- áp dụng khi màn hình xoay ngang dùng : orientation : landscape
- áp dụng khi xoay dọc là portrait

-   <!-- 
[yellow] Thiết bị di động: 319px — 480px
[chocolate] iPads và máy tính bảng: 481px — 1200px
[green] Laptop: 1201px — 1600px
[purple] Máy tính để bàn: 1601px trở lên
-->

- break point: theo lý thuyết sẽ cách nhau 1px
        -> trong tình huống mà viewport dừng đúng khoảng này 
        -> css sẽ ko hoạt động như mong muốn -> -0,02 để thu hẹp vùng giao thoa. vd max-width: 480,98px

- Mở web trên điện thoại lun
        1. cmd --> ipconfig --> lấy Ipv4
        2. lấy điện thoại bắt wifi cùng rooter vs PC

//Bài 101====================================================================

- Hàm min: chọn giá trị nhỏ nhất (âm nhất) trong danh sách giá trị ngăn cách nhau bởi dấu phẩy, giá trị nào nhỏ hơn so với cái size hiện tại thì dùng
        -> min(<value-list>);

- - Hàm max: chọn giá trị lớn nhất (dương nhất) trong danh sách giá trị ngăn cách nhau bởi dấu phẩy, giá trị nào lớn hơn so với cái size hiện tại thì dùng
        -> max(<value-list>);

- hàm clamp: kẹp 1 giá trị giữa giới hạn trên và giới hạn dưới, dựa trên giá trị lý tưởng đã đặt
        -> clamp(<min>, <ideal>, <max>)
        ->giá trị ở giữa là giá trị ưu tiên áp dụng. còn nếu chạm đến min sẽ áp dụng min, chạm đến max sẽ áp dụng max

//Bài 102========================================================================

- transition: cho phép kiểm soát thời gian chuyển tiếp của 1 phần tử từ trạng thái này sang trang thái khác với hiệu ứng mượt mà

- thuộc tính
        1. transition-property
                Ý nghĩa: Xác định thuộc tính CSS sẽ được transition (để all hoặc không nhập gì để hiểu là áp dụng cho tất cả)
                Ví dụ: width, height, opacity
        2. transition-duration (bắt buộc có)
                Ý nghĩa: Transition từ trạng thái A -> B mất bao lâu
                Ví dụ: 1s (1 giây), 500ms (500 mili giây)
        3.  transition-timing-function
                Ý nghĩa: Xác định cách thay đổi của thuộc tính theo thời gian, thay đổi thời gian từng đoạn trong tổng thời gian, ví dụ nhanh xong châm... nhưng tổng time vẫn ko đổi
                Ví dụ: ease, linear, ease-in, ease-out
        4.  transition-delay
                Ý nghĩa: Xác định thời gian trễ trước khi Transition bắt đầu
                Ví dụ: 0.5s (0.5 giây)

- ko nên lạm dụng all để giảm tải dung lượng cho trang web, nếu cần biến đổi thuộc tính nào nên liệt kê thuộc tính đó ra
        -> tối ưu hóa hiệu suất trang web
- viết tắt: 
        transition: <property> <timing-function> <duration> <delay>;
        --> duration luôn ở phía trc delay, timing, property bỏ đâu cx dc

- Notice: 
        1. ko phải thuộc tính nào cũng hổ trợ transition, Animations
                -> ví dụ :display: none
        2. ko nên áp dụng transition và Animations vào hover và active

//Bài 103=============================================================

- transform cho phép chúng ta thay đổi kích thước, hình dạng, vị trí của các phần tử trên trang web
        1. rotate(<độ>deg): xoay phần tử (gõ tắt rotate())
        2. scale(): co giãn phần tử theo chiều ngang và chiều dọc
                -> nhập 1 đối số thì co giãn 2 CHIỀU
                -> nhập 2 đối số scale (chiều x, chiều y)
        3. skew(): biến dạng: sử dụng để nghiêng phần tử theo 2 chiều
        4. translate(): dịch chuyển 1 phần tử theo chiều ngang và chiều dọc

- notice:
        1. có thể kết hợp nhiều thuộc tính vs nhau, mỗi hàm cách nhau bỏi dấu cách
        2. transform ko đẩy dc các phần tử xung quanh (nó có thể đè lên phần tử)
        3. có thể cần thêm prefix nếu dùng cho các trình duyệt cũ

//Bài 104=============================================

- xoay nền mà ko xoay chữ
        1. cho khối chứ chữ position: relative
        2. dùng before cho khối con position:absolute
        3. before phải có content
        4. dô https://game.tuhoc.cc/9/gradient-css-generator.html làm nền
        5. nền che chữ dùng z-index

//Bài 105==============================================

- Dùng transform tạo hiệu ứng cho button

button {
  display: flex;
  margin: 30px;
  outline: none;
  border: none;
}

.btn {
  padding: 20px 40px;
  font-size: 16px;
  font-weight: 600px;
  border-radius: 99px;
  color: #fff;
  background: rgb(90, 13, 192);
  transition: 0.5s;
}

/* thay đổi vị trí */

.btn-1:hover {
  /* transform: translate(0, -15px); */
  translate: 0 -15px;
}

/* chuyển bg */
.btn-2:hover {
  background: blue;
}

/* chuyển màu nền từ trái qua phải */
.btn-3 {
  position: relative;
  overflow: hidden;
}

.btn__span {
  position: relative;
  z-index: 1;
}

.btn-3::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  width: 0;
  background: #000;
  transition: width 0.5s linear;
}

.btn-3:hover::after {
  width: 100%;
}

/* chuyển màu và chạy tiếp */

.btn-4 {
  position: relative;
  overflow: hidden;
}

.btn-4::after {
  content: "";
  position: absolute;
  top: 0;
  /* left: 0; */
  /* nhả tay ra thì chuyển qua căn phải w từ 100% thụt về 0 */
  right: 0;
  bottom: 0;
  width: 0;
  background: #000;
  transition: width 0.5s linear;
}

/* khi hover vào thì căn theo cạnh trái độ rộng tăng từ 0 lên 100% */
.btn-4:hover::after {
  left: 0;
  width: 100%;
}

/* chạy từ trên xuống dưới và chạy tiếp */
.btn-5 {
  position: relative;
  overflow: hidden;
}

.btn-5::after {
  content: "";
  position: absolute;
  left: 0;
  /* nhả tay ra thì chuyển qua căn phải w từ 100% thụt về 0 */
  right: 0;
  bottom: 0;
  height: 0;
  background: #000;
  transition: height 0.5s linear;
}

/* khi hover vào thì căn theo cạnh trái độ rộng tăng từ 0 lên 100% */
.btn-5:hover::after {
  top: 0;
  height: 100%;
}


//Bài 106=============================================

- animation: tạo hiệu ứng hoạt cảnh mà ko cần tác động vào phần tử

- muốn dùng animation thì phải tạo css keyframes: là cách tạo các bước cụ thể của animation, từ điểm xuất phát đến điểm kết thúc

@keyframes spin_element {
  from { //điểm bắt đầu
    rotate: 0;
  }
  to { //điểm kết thúc
    rotate: 360deg;
  }
}

- áp dụng trong đâu thì code trong đó

- cách áp dụng
Giá trị                           | Mô tả                                      | Remark            
-----------------------------------|--------------------------------------------|-------------------
animation-name                    | Tên của keyframes @keyframes               | Bắt buộc phải có  
animation-duration                | Thời gian một animation diễn ra: giây(s)   | Bắt buộc phải có  
timing-function                   |                                             |                   
animation-timing-function         | Cách thức diễn ra của hành động            | Tuỳ chọn, mặc định
                                   | (chẳng hạn như linear, ease-in, ease-out,  | là ease.          
                                   | ease-in-out, v.v...)                       |                   
animation-delay                   | Thời gian chờ trước khi hành động          | Tuỳ chọn          
                                   | (animation) bắt đầu: giây(s)               |                   
animation-iteration-count         | Số lần lặp lại của một animation           | Tuỳ chọn, mặc định là 1
                                   |                                            | 2. có thể chọn 1 số nguyên
                                                                                | 3. infinite để lặp vô tận            
direction                       xác định hướng của animation                    1. Tùy chọn, mặc định là: normal;
                                                                                Animation sẽ chuyển động theo thứ tự bình thường từ keyframe xuất phát đến keyframe kết thúc.

                                                                                2. Reverse: Animation sẽ chuyển động ngược lại từ keyframe kết thúc về keyframe xuất phát.

                                                                                3. alternate: Animation sẽ lặp lại theo hướng normal, sau đó lặp lại theo hướng reverse, và tiếp tục lặp lại theo cách đó.

                                                                               
                                                                                4. alternate-reverse: Animation sẽ lặp lại theo hướng reverse, sau đó lặp lại theo hướng normal, và tiếp tục lặp lại theo cách đó.

fill-model                      xác định vị trí của phần tử sau khi kết thúc    1. Tùy chọn, mặc định là: none -> Không có bất kỳ thay đổi gì

                                                                                2. forwards: Phần tử sẽ giữ giá trị của keyframe cuối cùng sau khi animation kết thúc.

                                                                                3. backwards: Ngay tại thời điểm bắt đầu, animation sẽ ở vị trí keyframe đầu tiên.

                                                                                4. both: Animation áp dụng cả forwards và backwards - Tức là animation sẽ bắt đầu tại keyframe đầu tiên và dừng lại ở keyframe cuối cùng.

                                                                                                                animation                                               

- nếu keyframe có nhiều bước ta sẽ ko sử dụng from...to mà dùng % từ 0 --> 100%

(-100px, -100px)  
   3             4 (0, -100px)
   +-------------+
   |             |
   |             |
   |             |
   +-------------+
   2             1
(-100px, 0)     (0, 0)
